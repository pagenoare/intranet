var App = angular.module('intranet', ['ngDragDrop', 'ngRoute', 'ui.bootstrap', '$strap.directives']);

App.config(function($httpProvider, $routeProvider, $locationProvider) {
  $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

  $routeProvider.when('/mobile/lateness', {
    templateUrl: 'lateness.html',
    controller: 'latenessCtrl',
    resolve: {
      dialog: function() {return undefined;}
    }
  }).when('/mobile/user/list', {
    templateUrl: 'users-mobile.html',
    controller: 'usersCtrl'
  }).when('/mobile/confirm', {
    template: '<div ng-bind-html="message"></div>',
    controller: 'modalConfirmCtrl',
    resolve: {
      dialog: function() {return undefined;},
      messages: function($routeParams) {return $routeParams;}
    }
  }).otherwise({
      redirectTo: '/mobile/user/list'
  });
});

App.run(function($rootScope) {
  $rootScope.G = G;
});


App.config(function($compileProvider){
  $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|tel):/);
});

function generateTable(data) {
    var $absences = $('.absences');
    // Inform user that something is happening.
    $absences.text('Preparing data, please wait...');

    // For starters, prepare HTML structure. If it's generated by JS, it should
    // be 100% generated.
    var $struct = $([
        '<div class="absences">',
            '<div class="floaty placeholder"></div>',
            '<div class="floaty topHeader days">',
                '<table class="display" id="days">',
                    '<thead></thead>',
                '</table>',
            '</div>',
            '<div class="floaty leftHeader users">',
                '<table class="display" id="users">',
                    '<tbody></tbody>',
                '</table>',
            '</div>',
            '<div class="floaty data">',
                '<div class="scrollable">',
                    '<table class="display" id="data">',
                        '<tbody></tbody>',
                    '</table>',
                '</div>',
            '</div>',
        '</div>'
    ].join('\n'));

    // All necessary variables
    var today = new Date(),
        todayString = $.datepicker.formatDate('yy-mm-dd', today),
        dayLetters = ['M', 'T', 'W', 'M', 'F', 'S', 'S'],
        startDay = data.startDay.day,
        dayOfWeek = data.startDay.dow,
        rows = [];

    // Selectors
    var $days = $struct.find('#days thead'),
        $users = $struct.find('#users tbody'),
        $data = $struct.find('#data tbody'),
        $placeholder = $struct.find('.placeholder');
        singleRowStub = $('<tr />'),

    // Placeholder!
    $placeholder.html('<div>Total: <span class="help" title="leave days used / leave days mandated">'+data.absencesSum[0]+'/'+data.absencesSum[1]+'</span></div>');

    // Generate all headers!
    // Header 1: month's name (July)
    var header1 = $('<tr />');
    // Header 2: month's days (1, 2, 3...)
    var header2 = $('<tr />');
    // Header 3: week days (M, T, W...)
    var header3 = $('<tr />');
    var first = true;
    _.each(data.months, function(m){
        var firstMonth = (data.months.indexOf(m) == 0);
        // Month header
        // Month name is spanning through all days
        var colspan = firstMonth ? m[1]-startDay+1 : m[1];
        var monthNo = m[2]<10 ? '0'+m[2] : m[2];
        var link = '/employees/list/absence?limit=200&date_start=01-'+monthNo+'-'+data.year+'&date_end='+m[1]+'-'+monthNo+'-'+data.year;
        var monthText = m[0] + ' (<a href="'+link+'" class="help" title="leave days count (excluding illness leaves)">'+data.absencesMonths[m[2]]+'</a>)';
        var headTd = $('<th/>').html(monthText).attr('colspan', colspan).addClass('month');
        if(data.year === today.getFullYear() && m[2] === today.getMonth()+1) {
            headTd.addClass('current');
        }
        header1.append(headTd);
        var iTemp = firstMonth ? startDay : 1;
        for(var i=iTemp; i<=m[1]; i++) {
            // Day ID, e.g. 2013-06-10
            var dayId = data.year + '-' + monthNo + '-' + (i<10 ? '0' : '') + i
            // Day number
            var head2Td = $('<th class="day">'+i+'</th>');
            // Week day letter
            var head3Td = $('<th class="day">'+dayLetters[(dayOfWeek%7)]+'</th>');
            var td;
            // Workaround to make all cells have the same height
            if(first) {
                td = $('<td class="'+dayId+'">&nbsp;</td>');
                first = false;
            } else {
                td = $('<td />');
            }
            td.addClass(dayId);
            // Special classes
            if(i == m[1]) { // End of the month
                head2Td.addClass('monthend');
                head3Td.addClass('monthend');
                td.addClass('monthend');
            }
            if(dayOfWeek%7 >= 5 || data.holidays.indexOf(dayId) != -1) { // Saturday, Sunday or Holiday
                head2Td.addClass('holiday');
                head3Td.addClass('holiday');
                td.addClass('holiday');
            }
            if(dayId === todayString) { // Today
                head2Td.addClass('today');
                head3Td.addClass('today');
                td.addClass('today');
            }
            header2.append(head2Td);
            header3.append(head3Td);
            singleRowStub.append(td);
            dayOfWeek++;
        }
    });

    // Generate all users!
    var users = '';
    // cg = currentGroup
    var cgNo = 0,
        cgUser = 0,
        cg = data.userGroups[0];
    _.each(data.users, function(u){
        if(cgUser >= cg[1]) {
            cgNo++;
            cg = data.userGroups[cgNo];
            cgUser = 0;
        }
        var row = singleRowStub.clone();
        row.attr('id', 'u'+u.id);
        var leaves = '<span class="help" title="leave days used / leave days mandated">('+u.leave_used+'/'+u.leave_mandated+')</span>';
        var groupHeader = cgUser == 0 ? '<td class="city-vertical" rowspan="'+cg[1]+'"><span>'+cg[0]+'</span></td>' : '';
        var link = '/employees/list/absence?user_id='+u.id+'&limit=200&date_start=01-01-'+data.year+'&date_end=31-12-'+data.year;
        users += '<tr id="u'+u.id+'">'+groupHeader+'<td class="user"><a href="'+link+'">'+u.name+' '+leaves+'</a></td></tr>';
        if(u.id in data.absences) { // Absences
            for(start in data.absences[u.id]) {
                var attr = data.absences[u.id][start];
                // attr: [length, type, description]
                // Failsafety for wrong entries
                if(attr[0] <= 0) {
                    attr[0] = 1;
                }
                var $td = row.find('.'+start);
                if (attr[0] > 1) {
                    var $tdNext = $td.nextAll(':lt('+(attr[0]-1)+')');
                    if($tdNext.length) {
                        $td = $td.add($tdNext);
                    }
                }
                $td.addClass('absent').attr({
                    title: '<b>'+u.name+'</b> <i>('+u.leave_used+'/'+u.leave_mandated+'</i>)<br />'+attr[2]
                });
                var date = new Date(Date.parse(start)),
                    dateString = '';
                for(var i=0; i<attr[0]; i++) {
                    dateString = $.datepicker.formatDate('dd.mm.yy', date);
                    var link = '<a href="/times/list_user?date='+dateString+'&user_id='+u.id+'">Hours</a>';
                    date.setDate(date.getDate()+1); // Add 1 day - obvious, isn't it?
                    $td.eq(i).html(link);
                }
                $td.last().addClass('last');
            }
        }
        if(u.id in data.lates) { // Latenesses
            for(when in data.lates[u.id]) {
                var why ='<b>'+u.name+'</b><br />'+data.lates[u.id][when];
                row.find('.'+when).addClass('late inactive').attr('title', why);
            }
        }
        rows.push(row);
        cgUser++;
    });

    // Append!
    $days.append(header1);
    $days.append(header2);
    $days.append(header3);
    $users.append(users);
    $data.append(rows);

    // Wrap all today cells
    $data.find('.today').prev().addClass('today');

    $absences.replaceWith($struct);
}

var App = angular.module('intranet');


App.controller('absenceCtrl', function($scope, $http, $dialog, dialog) {
    $scope.errors = {};
    $scope.absence = {popup_type: "planowany"};

    $scope.close = function() {
        dialog.close();
    };

    $scope.add = function() {
        $scope.form_submitted = true;

        $http.post('/api/absence', {
            absence: $scope.absence
        }).success(function(data) {
            $scope.close();

            $dialog.dialog({
                resolve: {messages: function() {return data;}}
            }).open('modalConfirm.html', 'modalConfirmCtrl');
        }).error(function(data) {
            $scope.absenceForm.$setPristine();
            $scope.errors = {};

            angular.forEach(data, function(errors, field) {
                $scope.absenceForm[field].$setValidity('server', false);
                $scope.errors[field] = errors.join('<br/>');
            });

            $scope.form_submitted = false;
        });
    };

    $scope.updateDays = function() {
        if($scope.absence.popup_date_start) {
            $http.get('/api/absence_days', {
                params: {
                    date_start: $scope.absence.popup_date_start,
                    date_end: $scope.absence.popup_date_end,
                    type: $scope.absence.popup_type
                }
            }).success(function(data) {
                $scope.days = data.days;
                $scope.mandated = data.mandated;
                $scope.left = data.left;
            }).error(function(data) {
                $scope.errors['absence_days'] = '';
                angular.forEach(data, function(errors, field) {
                    $scope.errors['absence_days'] += field + ': ' + errors.join(', ');
                });
            });
        }
    };
});

var App = angular.module('intranet');

App.directive('dateRangePicker', function($compile) {
  return {
    require: 'ngModel',
    link: function(scope, el, attr, ngModel) {
      var format = 'dd-MM-yyyy';
      ngModel.$formatters.push(function(value){
        if(value && value.start && value.end){
          var start = value.start.toString(format);
          var end = value.end.toString(format);
          return start + ' - ' + end;
        }
        return '';
      });
      var thisYearStart = new Date(new Date().getFullYear(), 0, 1);
      var thisYearEnd = new Date(new Date().getFullYear(), 11, 31);
      var lastYearStart = new Date(new Date().getFullYear()-1, 0, 1);
      var lastYearEnd = new Date(new Date().getFullYear()-1, 11, 31);
      $(el).daterangepicker(
        {
          ranges: {
            'This Month': [Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()],
            'Last Month': [Date.today().moveToFirstDayOfMonth().add({ months: -1 }), Date.today().moveToFirstDayOfMonth().add({ days: -1 })],
            'This Year': [thisYearStart, thisYearEnd],
            'Last Year': [lastYearStart, lastYearEnd]
          },
          opens: 'right',
          format: 'dd-MM-yyyy',
          separator: ' - ',
          startDate: Date.today().moveToFirstDayOfMonth(),
          endDate: Date.today().moveToLastDayOfMonth(),
          locale: {
            applyLabel: 'Submit',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Custom Range',
            daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr','Sa'],
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            firstDay: 1
          },
          showWeekNumbers: true,
          buttonClasses: ['btn-danger']
        },
        function (start, end) {
          scope.$apply(function() {
            ngModel.$setViewValue({
              start: start,
              end: end
            });
          });
        }
      );
    }
  };
});

/**
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/**
 * Implementing Drag and Drop functionality in AngularJS is easier than ever.
 * Demo: http://codef0rmer.github.com/angular-dragdrop/
 *
 * @version 1.0.2
 *
 * (c) 2013 Amit Gharat a.k.a codef0rmer <amit.2006.it@gmail.com> - amitgharat.wordpress.com
 */

var jqyoui = angular.module('ngDragDrop', []).service('ngDragDropService', ['$timeout', '$parse', function($timeout, $parse) {
    this.callEventCallback = function (scope, callbackName, event, ui) {
      if (!callbackName) {
        return;
      }
      var args = [event, ui];
      var match = callbackName.match(/^(.+)\((.+)\)$/);
      if (match !== null) {
        callbackName = match[1];
        values = eval('[' + match[0].replace(/^(.+)\(/, '').replace(/\)/, '') + ']');
        args.push.apply(args, values);
      }
      scope[callbackName].apply(scope, args);
    };
    this.callCallback = function (scope, callbackName, args) {
      if (!callbackName) {
        return;
      }
      var match = callbackName.match(/^(.+)\((.+)\)$/);
      if (match !== null) {
        callbackName = match[1];
        values = eval('[' + match[0].replace(/^(.+)\(/, '').replace(/\)/, '') + ']');
        args.push.apply(args, values);
      }
      return scope[callbackName].apply(scope, args);
    };

    this.invokeDrop = function ($draggable, $droppable, event, ui) {
      var dragModel = '',
        dropModel = '',
        dragSettings = {},
        dropSettings = {},
        jqyoui_pos = null,
        dragItem = {},
        dropItem = {},
        dragModelValue,
        dropModelValue,
        $droppableDraggable = null,
        droppableScope = $droppable.scope(),
        draggableScope = $draggable.scope();

      dragModel = $draggable.attr('ng-model');
      dropModel = $droppable.attr('ng-model');
      dragModelValue = draggableScope.$eval(dragModel);
      dropModelValue = droppableScope.$eval(dropModel);

      $droppableDraggable = $droppable.find('[jqyoui-draggable]:last');
      dropSettings = droppableScope.$eval($droppable.attr('jqyoui-droppable')) || [];
      dragSettings = draggableScope.$eval($draggable.attr('jqyoui-draggable')) || [];

      jqyoui_pos = angular.isArray(dragModelValue) ? dragSettings.index : null;
      dragItem = angular.isArray(dragModelValue) ? dragModelValue[jqyoui_pos] : dragModelValue;

      if (angular.isArray(dropModelValue) && dropSettings && dropSettings.index !== undefined) {
        dropItem = dropModelValue[dropSettings.index];
      } else if (!angular.isArray(dropModelValue)) {
        dropItem = dropModelValue;
      } else {
        dropItem = {};
      }

      if (dragSettings.animate === true) {
        this.move($draggable, $droppableDraggable.length > 0 ? $droppableDraggable : $droppable, null, 'fast', dropSettings, null);
        this.move($droppableDraggable.length > 0 && !dropSettings.multiple ? $droppableDraggable : [], $draggable.parent('[jqyoui-droppable]'), jqyoui.startXY, 'fast', dropSettings, function() {
          $timeout(function() {
            // Do not move this into move() to avoid flickering issue
            $draggable.css({'position': 'relative', 'left': '', 'top': ''});
            $droppableDraggable.css({'position': 'relative', 'left': '', 'top': ''});

            this.mutateDraggable(draggableScope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable);
            this.mutateDroppable(droppableScope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos);
            //this.callEventCallback(droppableScope, dropSettings.onDrop, event, ui);
          }.bind(this));
        }.bind(this));
      } else {
        $timeout(function() {
          this.mutateDraggable(draggableScope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable);
          this.mutateDroppable(droppableScope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos);
          //this.callEventCallback(droppableScope, dropSettings.onDrop, event, ui);
        }.bind(this));
      }
    };

    this.move = function($fromEl, $toEl, toPos, duration, dropSettings, callback) {
      if ($fromEl.length === 0) {
        if (callback) {
          window.setTimeout(function() {
            callback();
          }, 300);
        }
        return false;
      }

      var zIndex = 9999,
        fromPos = $fromEl.offset(),
        wasVisible = $toEl && $toEl.is(':visible');

      if (toPos === null && $toEl.length > 0) {
        if ($toEl.attr('jqyoui-draggable') !== undefined && $toEl.attr('ng-model') !== undefined && $toEl.is(':visible') && dropSettings && dropSettings.multiple) {
          toPos = $toEl.offset();
          if (dropSettings.stack === false) {
            toPos.left+= $toEl.outerWidth(true);
          } else {
            toPos.top+= $toEl.outerHeight(true);
          }
        } else {
          toPos = $toEl.css({'visibility': 'hidden', 'display': 'block'}).offset();
          $toEl.css({'visibility': '','display': wasVisible ? '' : 'none'});
        }
      }

      $fromEl.css({'position': 'absolute', 'z-index': zIndex})
        .css(fromPos)
        .animate(toPos, duration, function() {
          if (callback) callback();
        });
    };

    this.mutateDroppable = function(scope, dropSettings, dragSettings, dropModel, dragItem, jqyoui_pos) {
      var dropModelValue = scope.$eval(dropModel);
      var abort = this.callCallback(scope, dropSettings['onBeforeDrop'], [dropModelValue, dragItem]);

      if(abort === false) return


      scope.__dragItem = dragItem;

      if (angular.isArray(dropModelValue)) {
        if (dropSettings && dropSettings.index >= 0) {
          dropModelValue[dropSettings.index] = dragItem;
        } else {
          dropModelValue.push(dragItem);
        }
        if (dragSettings && dragSettings.placeholder === true) {
          dropModelValue[dropModelValue.length - 1]['jqyoui_pos'] = jqyoui_pos;
        }
      } else {
        $parse(dropModel + ' = __dragItem')(scope);
        if (dragSettings && dragSettings.placeholder === true) {
          dropModelValue['jqyoui_pos'] = jqyoui_pos;
        }
      }


      this.callCallback(scope, dropSettings['onAfterDrop'], {dropModel:dropModelValue, dragModel:dragItem});
    };

    this.mutateDraggable = function(scope, dropSettings, dragSettings, dragModel, dropModel, dropItem, $draggable) {
      var isEmpty = $.isEmptyObject(angular.copy(dropItem)),
        dragModelValue = scope.$eval(dragModel);

      scope.__dropItem = dropItem;

      if (dragSettings && dragSettings.placeholder) {
        if (dragSettings.placeholder != 'keep'){
          if (angular.isArray(dragModelValue) && dragSettings.index !== undefined) {
            dragModelValue[dragSettings.index] = dropItem;
          } else {
            $parse(dragModel + ' = __dropItem')(scope);
          }
        }
      } else {
        if (angular.isArray(dragModelValue)) {
          if (isEmpty) {
            if (dragSettings && ( dragSettings.placeholder !== true && dragSettings.placeholder !== 'keep' )) {
              dragModelValue.splice(dragSettings.index, 1);
            }
          } else {
            dragModelValue[dragSettings.index] = dropItem;
          }
        } else {
          // Fix: LIST(object) to LIST(array) - model does not get updated using just scope[dragModel] = {...}
          // P.S.: Could not figure out why it happened
          $parse(dragModel + ' = __dropItem')(scope);
          if (scope.$parent) {
            $parse(dragModel + ' = __dropItem')(scope.$parent);
          }
        }
      }

      $draggable.css({'z-index': '', 'left': '', 'top': ''});
    };
  }]).directive('jqyouiDraggable', ['ngDragDropService', function(ngDragDropService) {
    return {
      require: '?jqyouiDroppable',
      restrict: 'A',
      link: function(scope, element, attrs) {
        var dragSettings, zIndex;
        var updateDraggable = function(newValue, oldValue) {
          if (newValue) {
            dragSettings = scope.$eval(element.attr('jqyoui-draggable')) || [];
            element
              .draggable({disabled: false})
              .draggable(scope.$eval(attrs.jqyouiOptions) || {})
              .draggable({
                start: function(event, ui) {
                  zIndex = $(this).css('z-index');
                  $(this).css('z-index', 99999);
                  jqyoui.startXY = $(this).offset();
                  ngDragDropService.callEventCallback(scope, dragSettings.onStart, event, ui);
                },
                stop: function(event, ui) {
                  $(this).css('z-index', zIndex);
                  ngDragDropService.callEventCallback(scope, dragSettings.onStop, event, ui);
                },
                drag: function(event, ui) {
                  ngDragDropService.callEventCallback(scope, dragSettings.onDrag, event, ui);
                }
              });
          } else {
            element.draggable({disabled: true});
          }
        };
        scope.$watch(function() { return scope.$eval(attrs.drag); }, updateDraggable);
        updateDraggable();
      }
    };
  }]).directive('jqyouiDroppable', ['ngDragDropService', function(ngDragDropService) {
    return {
      restrict: 'A',
      priority: 1,
      link: function(scope, element, attrs) {
        var updateDroppable = function(newValue, oldValue) {
          if (newValue) {
            element
              .droppable({disabled: false})
              .droppable(scope.$eval(attrs.jqyouiOptions) || {})
              .droppable({
                over: function(event, ui) {
                  var dropSettings = scope.$eval(angular.element(this).attr('jqyoui-droppable')) || [];
                  ngDragDropService.callEventCallback(scope, dropSettings.onOver, event, ui);
                },
                out: function(event, ui) {
                  var dropSettings = scope.$eval(angular.element(this).attr('jqyoui-droppable')) || [];
                  ngDragDropService.callEventCallback(scope, dropSettings.onOut, event, ui);
                },
                drop: function(event, ui) {
                  ngDragDropService.invokeDrop(angular.element(ui.draggable), angular.element(this), event, ui);
                }
              });
          } else {
            element.droppable({disabled: true});
          }
        };

        scope.$watch(function() { return scope.$eval(attrs.drop); }, updateDroppable);
        updateDroppable();
      }
    };
  }]);

var App = angular.module('intranet');

App.directive('formTimepicker', function() {
    return {
        restrict: 'E',
        require: 'ngModel',
        scope: {
            name: "@",
            ngModel: "="
        },
        transclude: true,
        replace: true,
        templateUrl: 'form/timepicker.html',
        compile: function($el, attr) {
            var input = $el.find('input');

            input.attr('name', attr.name);
            input.attr('default-time', attr.defaultTime);
        }
    };
});

var App = angular.module('intranet');

App.directive('jqdatepicker', function() {
  return {
    require: 'ngModel',
    link: function(scope, el, attr, ngModel) {
      el.datepicker({
        dateFormat: 'dd/mm/yy',
        showOn: 'focus',
        onSelect: function(dateText) {
          scope.$apply(function() {
            ngModel.$setViewValue(dateText);
          });
          el.trigger('change');
        }
      });
      if(attr.defaultDate) {
          if(attr.defaultDate === 'today') {
              var date = $.datepicker.formatDate('dd/mm/yy', new Date());
          } else {
              var date = attr.defaultDate;
          }
          el.val(date);
          ngModel.$setViewValue(date);
      }
    }
  };
});

// This is a hack to get unicode characters sorting working

function isString(value){return typeof value == 'string';}
function isArray(value) {
  return toString.apply(value) == '[object Array]';
}
function toBoolean(value) {
  if (value && value.length !== 0) {
    var v = lowercase("" + value);
    value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
  } else {
    value = false;
  }
  return value;
}
var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};

angular.module('intranet').filter('orderBy', function($parse) {
  return function(array, sortPredicate, reverseOrder) {
    if (!isArray(array)) return array;
    if (!sortPredicate) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
    sortPredicate = _.map(sortPredicate, function(predicate){
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        get = $parse(predicate);
      }
      return reverseComparator(function(a,b){
        return compare(get(a),get(b));
      }, descending);
    });
    var arrayCopy = [];
    for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
      return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2){
      for ( var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return toBoolean(descending)
      ? function(a,b){return comp(b,a);}
      : comp;
    }
    function compare(v1, v2){
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 == t2) {
        if (t1 == "string") {
          v1 = v1.toLowerCase();
          v2 = v2.toLowerCase();
          if (v1 === v2) return 0;
          return v1.localeCompare(v2);  // here is intranet new stuff
        } else {
          if (v1 === v2) return 0;
          return v1 < v2 ? -1 : 1;
        }
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  }
});

angular.module('$strap.directives').directive('userTooltip', [
  '$parse',
  '$compile',
  function ($parse, $compile) {
    return {
      restrict: 'A',
      scope: true,
      link: function postLink(scope, element, attrs, ctrl) {
        user = $parse(attrs.userTooltip)(scope),

        element.tooltip({
          title: '<h3>' + user.name + '</h3>Ładowanie...',
          html: true,
          // delay: 300,
          animation: false,
          placement: 'bottom',
          template: '"<div class="tooltip users-tooltip-container"><div id="users-tooltip-angular" class="tooltip-inner"></div></div>"'
        });
        var tooltip = element.data('tooltip');

        scope.users = {};
        scope.xhr = null;
        scope.get = function(uid,fn){
          if(scope.xhr){
              scope.xhr.abort();
          }
          if(uid in scope.users){
              fn(scope.users[uid]);
          }else{
              scope.xhr = $.get('/user/tooltip?user_id='+uid,function(html){
                  scope.xhr = null;
                  scope.users[uid] = html;
                  fn(html);
              });
          }
        };

        scope.userId = user.id;
        element.mouseenter(function () {
          if (!(scope.userId in scope.users)) {
            scope.get(scope.userId, function(html){
              tooltip.options.title = html;
              tooltip.setContent();
              if (tooltip.hoverState == 'in') {
                tooltip.show();
              }
            });
          }
        })
      }
    };
  }
]);

var App = angular.module('intranet');


App.controller('latenessCtrl', function($scope, $http, $location, $dialog, dialog) {
    $scope.errors = {};

    $scope.modal = !!dialog;

    $scope.close = function() {
        dialog.close();
    };

    $scope.add = function() {
        $scope.form_submitted = true;

        $http.post('/api/lateness', {
            lateness: $scope.lateness
        }).success(function(data) {
            if(!$scope.modal) {
                $location.path('/mobile/confirm').search(data);
            } else {
                $scope.close();

                $dialog.dialog({
                    resolve: {messages: function() {return data;}}
                }).open('modalConfirm.html', 'modalConfirmCtrl');
            }
        }).error(function(data) {
            $scope.latenessForm.$setPristine();
            $scope.errors = {};

            angular.forEach(data, function(errors, field) {
                $scope.latenessForm[field].$setValidity('server', false);
                $scope.errors[field] = errors.join('<br/>');
            });

            $scope.form_submitted = false;
        });
    };
});

var App = angular.module('intranet');


function capitalize(str) {
    var proper_str = str.replace('_', ' ');
    return proper_str[0].toUpperCase() + proper_str.slice(1);
}


App.controller('modalConfirmCtrl', function($scope, $http, $sce, dialog, messages) {
    $scope.close = function() {
        dialog.close();
    };

    var message = "";
    if(angular.isObject(messages)) {
        angular.forEach(messages, function(yes, msg) {
            message += capitalize(msg) + (yes ? "" : " not") + " added<br/>";
        });
    } else if(angular.isString(messages)) {
        message = angular.fromJson(messages);
    }
    $scope.message = $sce.trustAsHtml(message);
});

var App = angular.module('intranet');


App.controller('quickLinksCtrl', function($scope, $http, $window, $location, $dialog) {
    $scope.lateness = function(mobile) {
        if(mobile) {
            $location.path('/mobile/lateness');
        } else {
            $dialog.dialog().open('lateness.html', 'latenessCtrl');
        }
    };

    $scope.absence = function() {
        $dialog.dialog().open('absence.html', 'absenceCtrl');
    };

    $scope.usersList = function() {
        $location.path('/mobile/user/list');
    };

    $scope.fullI = function() {
        $window.location.href = '/?wants_mobile=0';
    };

    $scope.quickLinks = [
        {label: "Users list", func: $scope.usersList},
        {label: "Out of office form", func: $scope.lateness},
        {label: "Go to full intranet", func: $scope.fullI}
    ];
});
var App = angular.module('intranet');


App.controller('sprintEditCtrl', function($scope, $http, $dialog) {
  $scope.sprintId = sprint_id;
  if(board){
    $scope.columns = board;
  } else {
    $scope.columns = [{name: '', sections: [{name: '', cond: ''}]}];
  }

  $scope.columns_json = function(){
    return angular.toJson($scope.columns);
  };

  $scope.save = function(){
    var name = prompt('Name');
    var data = {
      'name': name,
      'board': angular.toJson($scope.columns)
    };
    $http.post('/api/boards', data);
  };

  $scope.add_column = function(){
    $scope.columns.push({name: '', sections: [{name: '', cond: ''}]})
  };

  $scope.add_section = function(column){
    column.sections.push({name: '', cond: ''})
  };

  $scope.remove_column = function(column){
    var index = $scope.columns.indexOf(column);
    $scope.columns.splice(index, 1);
  };

  $scope.remove_section = function(section, sections){
    var index = sections.indexOf(section);
    sections.splice(index, 1);
  };

  $scope.show_bugs = function(){
    var d = $dialog.dialog();
    d.open('scrum/sprint/bugsJson.html', 'sprintBugsJsonCtrl');

  };
  $scope.show_boards = function(){
    var d = $dialog.dialog({
      resolve: {
        $callerScope: function() {return $scope}
      }
    });
    d.open('scrum/sprint/boards.html', 'sprintBoardsCtrl');

  };
});

App.controller('sprintBoardsCtrl', function($scope, $http, dialog, $dialog, $filter, $callerScope){
  $scope.selected_board = undefined;

  $http.get('/api/boards').success(function(data){
    $scope.boards = data.boards;
    $scope.only_my = true;
    if($scope.boards.length > 0){
      $scope.selected_board = $scope.get_boards()[0];
    }
  });

  $scope.clone = function(){
    $callerScope.columns = angular.fromJson($scope.selected_board.board);
    $scope.close();
  };

  $scope.delete = function(){
    var r = confirm("Press a button!");
    if(r === true){
      $http.delete('/api/boards/' + $scope.selected_board.id).success(function(){
        var index = $scope.boards.indexOf($scope.selected_board);
        $scope.boards.splice(index, 1);
        $scope.selected_board = $scope.boards[0];
      });
    }
  };

  $scope.close = function() {
    dialog.close();
  };

  $scope.get_boards = function(){
    var boards = $scope.boards;
    if($scope.only_my){
      boards = _.filter(boards, function(b){
        return b.user.id == $scope.G.user.id;
      });
    }
    return boards
  };

  $scope.get_name = function(board){
    if($scope.only_my || board.user.id == $scope.G.user.id){
      return ''
    } else {
      return ' ( ' + board.user.name + ' )'
    }
  };
});

App.controller('sprintBugsJsonCtrl', function($scope, $http, dialog, $dialog){
  var promise = $http.get('/api/sprint/' + sprint_id + '/bugs')
  promise.success(function(response){
    $scope.bugs = JSON.stringify(angular.fromJson(response), undefined, 4);
  });

  $scope.bugs_error = false;
  promise.error(function(response){
    $scope.bugs_error = true
  });

  $scope.close = function() {
    dialog.close();
  };
});

angular.module('intranet')
    .service('date_of_birth', function(){
        return {

            create: function(START, END){

                var cls = function(){
                    var first = 0;
                    var second = 1;
                    var penult = END-START+3;
                    var last = END-START+4;

                    this.start = null;
                    this.end = null;
                    this.years = ['Date of birth'].concat(
                        ['Before ' + START],
                        _.range(START, END+1),
                        ['After '+ END],
                        ['Custom']
                    );
                    this.chosen = this.years[first];

                    this.set_range = function(start, end){
                        this.start = start;
                        this.end = end;
                    };

                    this.select_year = function(){
                        var chosen = this.years.indexOf(this.chosen);
                        switch (chosen){
                            case first:
                                this.set_range(null, null);
                                break;
                            case second:
                                this.set_range(START-50, START-1);
                                break;
                            case penult:
                                this.set_range(END+1, 2100);
                                break;
                            case last:
                                this.set_range(START, END);
                                break;
                            default:
                                var y = START + chosen - 2;
                                this.set_range(y, y);
                        }
                    };

                    this.is_custom = function() {
                        return this.years.indexOf(this.chosen)==last;
                    };

                    var count_years_occurrences = function(users){
                        var years = _.map(users, function(user){
                            if (user.date_of_birth)
                                return user.date_of_birth.substring(0,4);
                            else
                                return null;
                        });
                        years = _.compact(years);
                        var counts = {};
                        for(var i = 0; i < years.length; i++) {
                            var num = years[i];
                            counts[num] = counts[num] ? counts[num]+1 : 1;
                        }
                        return counts;
                    };

                    this.update_years = function(users){
                        var counts = count_years_occurrences(users);

                        // special cases for START > years > END
                        var before_start = 0;
                        var after_end = 0;
                        for (var i=1; i<100; i++){
                            before_start += counts[START-i] || 0;
                            after_end += counts[END+i] || 0;
                        }
                        if (before_start)
                            this.years[second] += ' (' + before_start + ')';
                        if (after_end)
                            this.years[penult] += ' (' + after_end + ')';

                        // the middle years
                        for (var i=second+1; i<penult; i++){
                            var n = counts[this.years[i]];
                            if (n)
                                this.years[i] += ' ('+ n + ')';
                        }
                    }
                };
                return new cls();
            }
        };
    }
);

var App = angular.module('intranet');


var calculateHeight = function() {
  maxHeight = $(window).height();
  $('.frame_team').css('max-height', maxHeight - 50);
  $('.frame_team ul').css('max-height', maxHeight - 215);
  $('.frame_team .box').css('max-height', maxHeight - 50);
  $('.team-box > ul').css('max-height', maxHeight - 248);
};
$( window ).resize(function() {
  calculateHeight();
});

$.fn.hasScrollBar = function() {
  return this.get(0).scrollHeight > this.height();
};

var resetScrolls = function(){
  var teams = $('.team-box ul');
  var users = $('.box-users ul');
  var scrollTeams = teams.hasScrollBar();
  var scrollUsers = users.hasScrollBar();

  calculateHeight();

  if (scrollTeams) {
    teams.addClass('scroll');
  }
  if (scrollUsers) {
    users.parent().addClass('scroll-user');
  }
};

var getTimeTicketsReportUrl = function(projectId, previousMonth) {
  var endDate = new Date();
  endDate.setMonth(endDate.getMonth() + 1);
  endDate.setDate(0);
  if (previousMonth) {
    endDate.setDate(0);
  }
  startDate = new Date();
  startDate.setMonth(endDate.getMonth());
  startDate.setDate(1);

  params = {
    date_range: startDate.toString('dd-MM-yyyy')
                + '+-+' + endDate.toString('dd-MM-yyyy'),
    projects: projectId,
    group_by_client: 'y',
    group_by_project: 'y',
    group_by_bugs: 'y',
    group_by_user: 'y'
  }
  url = '/times/tickets/report?';
  for (key in params) {
    url += key + '=' + params[key] + '&';
  }
  return url;
}

App.controller('oneCtrl', function($scope, $http, $dialog, $timeout, $filter) {
  $scope.teams = [];
  $scope.users = [];
  $scope.teamless = false;
  $scope.show_users = false;

  $scope.thisMonthWorkedHoursTooltip = 'Numbers of hours spent on this project <i>this</i> month';
  $scope.lastMonthWorkedHoursTooltip = 'Numbers of hours spent on this project <i>last</i> month';

  $http.get('/api/users').success(function(data){
    $scope.users = data.users;

    $http.get('/api/teams').success(function(data){
      $scope.teams = data.teams;
      _.each($scope.teams, function(team){
        team.workedHoursLastMonth = 0;

        _.each(team.projects, function(project){
          project.monthTimesUrl = getTimeTicketsReportUrl(project.id, false);
          project.previousMonthTimesUrl = getTimeTicketsReportUrl(project.id, true);
          team.workedHoursLastMonth += project.last_month_worked_hours;
          project.last_month_worked_hours = Math.round(project.last_month_worked_hours);
          project.this_month_worked_hours = Math.round(project.this_month_worked_hours);
        });

        team.projects = $filter('orderBy')(team.projects, 'last_month_worked_hours', true).slice(0, 4); // only top 4 projects

        team.users = _.filter($scope.users, function(user){
          return team.users.indexOf(user.id) !== -1;
        });

      });
      resetScrolls()
    });
  });


  $scope.onBeforeDrop = function(drop, drag){
    if(drop.indexOf(drag) !== -1) {
      return false;
    } else {
      var team = _.find($scope.teams, function(team){ return team.users == drop});
      team.dirty = true;
      return true;
    }
  };

  $scope.openModal = function(team){
      var d = $dialog.dialog({
          resolve: {
            $callerScope: function() {return $scope},
            team: function() {return team}
          }
        });
      d.open('team.html', 'teamCtrl');

  };

  $scope.save = function(team){
    var ids = _.pluck(team.users, 'id');
    $http.put('/api/teams/' + team.id, {
      users: ids
    }).success(function(data){
        team.dirty = false;
    });
  };

  $scope.deleteUser = function (item, team){
    $('.tooltip').remove();
    var index = team.users.indexOf(item);
    team.users.splice(index, 1);
    team.dirty = true;
  };

  $scope.deleteTeam = function (team){
    var r = confirm("Press a button");
    if(r == true){
      $http.delete('/api/teams/' + team.id);
      var index = $scope.teams.indexOf(team);
      $scope.teams.splice(index, 1)
    }
  };

  $scope.toggle_users = function(){
    $scope.show_users = !$scope.show_users;
    if($scope.show_users){
      $timeout(resetScrolls, 100);
    }
  };

  $scope.get_users = function(){
    if(!$scope.teamless){
      return $scope.users;
    }
    var users_in_teams = _.flatten(_.map($scope.teams, function(team){
      return team.users;
    }));
    return _.filter($scope.users, function(user){
      return _.indexOf(users_in_teams, user) === -1;
    });
  };

  $scope.get_filtered_users = function(){
    return $filter('filter')($scope.get_users(), 'userSearch');
  };

});

App.controller('teamCtrl', function($scope, $http, $timeout, dialog, $callerScope, team) {
  $scope.team = angular.copy(team || {users:[], name: '', img: '/api/preview?type=team'});
  $scope.swap_with_preivew = false;

  $scope.add = function(){
    $scope.form_submitted = true;
    if($scope.teamForm.$invalid) return;

    $http.post('/api/teams', {
      name: $scope.team.name,
      swap_with_preview: true
    }).success(function(data){
        $scope.team.id = data.id;
        $scope.team.img = data.img;
        $callerScope.teams.push($scope.team);
        dialog.close();
    });
  };

  $scope.edit = function(){
    $scope.form_submitted = true;
    if($scope.teamForm.$invalid) return;

    $http.put('/api/teams/' + team.id, {
      name: $scope.team.name,
      swap_with_preview: $scope.swap_with_preivew
    }).success(function(data){
        team.name = $scope.team.name;
        team.img = team.img + '?t=' + (new Date().getTime());
        dialog.close();
    });

  };

  $scope.close = function(){
    dialog.close();
  };

  $timeout(function(){
    var $btn = $('#upload-btn');

    var up = new Uploader($btn, {
      url: '/api/preview?type=team',
      onLoad: function(e) {
        $('#my-avatar img').attr('src',e.file.url+'?t='+(new Date().getTime()));
      },
      onComplete: function(e) {
        $scope.swap_with_preivew = true;
        $scope.$apply();
      },
      onProgress: function(e) {},
      onAdd: function(e) {},
      onError: function(e) {}
    });

  }, 100);

  return false;

});

var App = angular.module('intranet');

App.controller('usersCtrl', function($scope, $http, $dialog, $timeout, $filter, $location, date_of_birth) {
    $scope.users = [];
    $scope.tab = 'employees';
    $scope.search = {
      name: '',
      start_work: {
          start: undefined,
          end: undefined
      },
      stop_work: {
      },
      locations: [],
      roles: [],
      groups: [],
      teams: [],
      time_works: 0
    };

    $scope.$watch(function(){ return $location.search()}, function(){
      if ($location.search().start_work){
        var date_start = $location.search().start_work.split(' - ');
        $scope.search.start_work = {
          start: new Date.parse(date_start[0].split('-').reverse().join('-')),
          end: new Date.parse(date_start[1].split('-').reverse().join('-'))
        }
      }
      if ($location.search().stop_work){
        var date_stop = $location.search().stop_work.split(' - ');
        $scope.search.stop_work = {
          start: new Date.parse(date_stop[0].split('-').reverse().join('-')),
          end: new Date.parse(date_stop[1].split('-').reverse().join('-'))
        }
      }
    });

    var t = _.template("<%= start %> - <%= end %>");
    $scope.$watch('search.start_work', function(){
      var start = $scope.search.start_work.start;
      var end = $scope.search.start_work.end;

      if(start && end){
        start = start.toString('dd-MM-yyyy');
        end = end.toString('dd-MM-yyyy');
        $location.search('start_work', t({start:start, end:end}));
      } else {
        $location.search('start_work', '')
      }
    });

    $scope.$watch('search.stop_work', function(){
      var start = $scope.search.stop_work.start;
      var end = $scope.search.stop_work.end;

      if(start && end){
        start = start.toString('dd-MM-yyyy');
        end = end.toString('dd-MM-yyyy');
        $location.search('stop_work', t({start:start, end:end}));
      } else {
        $location.search('stop_work', '')
      }
    });

    $scope.set_tab = function(name){
       $scope.tab = name;
    };
    $scope.time_works = [
        {
            id: 0,
            name: 'All'
        },
        {
            id: 1,
            name: 'Full time'
        },
        {
            id: 2,
            name: 'Part time'
        }
    ];

    $scope.to_pretty_role = function(role){
      return _.find(G.ROLES, function(a_role){
        return a_role[0] === role;
      })[1];
    };

    $scope.dob = date_of_birth.create(1980, 1995);

    $http.get('/api/users?full=1&inactive=1').success(function(data){
      $scope.users = data.users;

      $http.get('/api/teams').success(function(data){
        var users_without_team = {'id':-1, 'name':' - No Team - ', 'users':[], 'active_user_counter': 0};

        _.each(data['teams'], function(team) {
          team.active_user_counter = 0;
        });

        _.each($scope.users, function(user) {
          user.teams = [];
          user.teams_ids = [];
          _.each(data['teams'], function(team) {
            if(_.contains(team.users, user.id)) {
             if (user.is_active) {
              team.active_user_counter += 1;
             }
             user.teams.push(team);
             user.teams_ids.push(team.id);
            }
          });
          if (user.is_active == true && !_.contains(user.groups, 'client') && user.teams.length == 0) {
            users_without_team.active_user_counter += 1;
          }
        });
        data['teams'].push(users_without_team);
        $scope.teams = $filter('orderBy')(data.teams, 'name');
        $scope.search.teams = [1]; //szczuczka aby wymusić odświeżenie -- spowodowane kiepska implementacja dyrektywy bs-select
        $timeout(function(){
          $scope.search.teams = [];
        }, 0);
      });
      $scope.dob.update_years($scope.users);

      var roles_counter = _.object(_.map($scope.G.ROLES, function(role) {
        return [role[0], 0];
      }));
      var groups_counter =  _.object(_.map($scope.G.GROUPS, function(group) {
        return [group, 0];
      }));
      var location_counter = {'wroclaw': 0, 'poznan': 0};

      _.each($scope.users, function(user) {
        if (user.is_active == false) {
          return;
        }
        _.each(user.roles, function(role) {
          roles_counter[role] += 1;
        });
        _.each(user.groups, function(group) {
          groups_counter[group] += 1;
        });
        location_counter[user.location[0]] += 1;
      });

      $scope.locations = [
        {
            id:'poznan',
            name:'Poznań',
            counter: location_counter['poznan']
        },
        {
            id:'wroclaw',
            name:'Wrocław',
            counter: location_counter['wroclaw']
        }
      ];
      $scope.roles = _.map($scope.G.ROLES, function(role) {
        var counter = roles_counter[role[0]];
        return {id: role[0], name: role[1], counter: counter};
      });
      $scope.roles = $filter('orderBy')($scope.roles, 'name')

      $scope.groups = _.map($scope.G.GROUPS, function(group){
        var counter = groups_counter[group];
        return {id: group, name: group, counter: counter};
      });
      $scope.groups = $filter('orderBy')($scope.groups, 'name')
    });

    $scope.filtered_users = function() {
      var filtered_users = $scope.users;
      var f_name = $scope.search.name.toLowerCase();
      if(f_name){
        filtered_users = _.filter(filtered_users, function(user){
          var u_name = user.name.toLowerCase();
          return u_name.indexOf(f_name) >= 0;
        });
      }

      var f_roles = $scope.search.roles;
      if(f_roles.length > 0){
        filtered_users = _.filter(filtered_users, function(user){
          var u_roles = user.roles;
          var intersection = _.intersection(f_roles, u_roles);
          return intersection.length > 0;
        });
      }

      var f_groups = $scope.search.groups;
      if(f_groups.length > 0){
        filtered_users = _.filter(filtered_users, function(user){
          var u_groups = user.groups;
          var intersection = _.intersection(f_groups, u_groups);
          return intersection.length > 0;
        });
      }

      var f_locations = $scope.search.locations;
      if(f_locations.length > 0){
        filtered_users = _.filter(filtered_users, function(user){
          var u_location = user.location[0];
          return _.indexOf(f_locations, u_location) >= 0;
        });
      }

      var f_teams = $scope.search.teams;
      if(f_teams.length > 0){
        filtered_users = _.filter(filtered_users, function(user){
          var u_teams = user.teams_ids;
          if(f_teams.indexOf(-1) >= 0){
            return u_teams.length == 0;
          } else {
            var intersection = _.intersection(f_teams, u_teams);
            return f_teams.length === intersection.length;
          }
        });
      }

      var start = $scope.search.start_work.start;
      var end = $scope.search.start_work.end;
      if(start && end){
        filtered_users = _.filter(filtered_users, function(user){
          var u_start_work = Date.parse(user.start_work);
          return !u_start_work || (start <= u_start_work && u_start_work <= end);
        });
      }

      start = $scope.search.stop_work.start;
      end = $scope.search.stop_work.end;
      if(start && end){
        filtered_users = _.filter(filtered_users, function(user){
          var u_stop_work = Date.parse(user.stop_work);
          return !!u_stop_work && (start <= u_stop_work && u_stop_work <= end);
      });

      filtered_users = _.filter(filtered_users, function(user){
        var u_start_work = Date.parse(user.start_work);
        return !$scope.search.start_work || !$scope.aditional_start || u_start_work <= $scope.aditional_start;
      });

      filtered_users = _.filter(filtered_users, function(user){
        var u_stop_work = Date.parse(user.stop_work);
        return !$scope.search.stop_work || !$scope.aditional_stop || u_stop_work <= $scope.aditional_stop;
        });
      }
      if ($scope.search.time_works != 0 ){
          if ($scope.search.time_works == 1) {
            filtered_users = _.filter(filtered_users, function(user){
              return user.start_full_time_work != null;
            });
          }
          else {
              filtered_users = _.filter(filtered_users, function(user){
                return user.start_full_time_work == null;
            });
          }

      }
        var d_start = $scope.dob.start;
        var d_end = $scope.dob.end;
        if( d_start && d_end ){
            filtered_users = _.filter(filtered_users, function(user){
                var dob = user.date_of_birth;
                if (dob){
                    var year = dob.substring(0,4);
                    dob = (year >= d_start) && (year <= d_end);
                }
                return dob;
            });
        }

      return filtered_users;
    };

    $scope.get_employees = function(){
      return _.filter($scope.filtered_users(), function(user){
        var not_client = _.indexOf(user.groups, 'client') === -1;
        var not_freelancer = !_.contains(user.groups, "freelancer");
        return user.is_active && not_client && not_freelancer;
      });
    };
    $scope.get_freelancers = function(){
      return _.filter($scope.filtered_users(), function(user){
        return user.is_active && _.contains(user.groups, "freelancer");
      });
    };
    $scope.get_clients = function(){
      return _.filter($scope.filtered_users(), function(user){
        var client = _.indexOf(user.groups, 'client') >= 0;
        return client;
      });
    };
    $scope.get_inactive = function(){
      return _.filter($scope.filtered_users(), function(user){
        var not_client = _.indexOf(user.groups, 'client') === -1;
        return !user.is_active && not_client;
      });
    };

    $scope.get_users = function(){
      if($scope.tab === 'employees'){
        return $scope.get_employees();
      } else if ($scope.tab === 'freelancers'){
        return $scope.get_freelancers();
      } else if ($scope.tab === 'clients'){
        return $scope.get_clients();
      } else if ($scope.tab === 'inactive'){
        return $scope.get_inactive();
      }
    };
});

var App = angular.module('intranet');

function updateLists($scope) {
    $scope.whitelist = _.filter($scope.users, function(user){
       return $scope.blacklistIds.indexOf(user.id) < 0;
    });
    $scope.blacklist = _.filter($scope.users, function(user){
       return $scope.blacklistIds.indexOf(user.id) >= 0;
    });
}

function parseLocalStorage($scope) {
    $scope.show_box = JSON.parse(localStorage['isLatesPreviewOpened'] || false);

    firstFetchToday = true;
    lastVisitDate = localStorage['lastVisitDate'];
    if (lastVisitDate != undefined) {
        if ((new Date(lastVisitDate)).isToday()) {
            firstFetchToday = false;
        }
    }

    if (firstFetchToday) {
        $scope.newLatesQuantity = 0;
        $scope.knownLatesIds = {};
        $scope.knownAbsencesIds = {};
    } else {
        $scope.knownLatesIds = JSON.parse(localStorage['knownLatesIds']);
        $scope.knownAbsencesIds = JSON.parse(localStorage['knownAbsencesIds']);
    }
}

function saveToLocalStorage($scope) {
    localStorage['knownLatesIds'] = JSON.stringify($scope.knownLatesIds);
    localStorage['knownAbsencesIds'] = JSON.stringify($scope.knownAbsencesIds);
    localStorage['lastVisitDate'] = new Date();
    localStorage['isLatesPreviewOpened'] = $scope.show_box;
}

function updateKnownIds($scope) {
    $scope.knownLatesIds = _.map($scope.lates, function(late) {
        return late.late_id;
    });
    $scope.knownAbsencesIds = _.map($scope.absences, function(absence) {
        return absence.absence_id;
    });
}

function findNewIds($scope, newData) {
    latesIds = _.map(newData.lates, function(late) {
        return late.late_id;
    });
    absencesIds = _.map(newData.absences, function(absence) {
        return absence.absence_id;
    });

    $scope.newLatesIds = _.difference(latesIds, $scope.knownLatesIds);
    $scope.newAbsencesIds = _.difference(absencesIds, $scope.knownAbsencesIds);
}

function countNewEntries($scope) {
    quantity = 0;
    _.each($scope.get_absences(), function(user) {
        if ($scope.newAbsencesIds.indexOf(user.absence_id) != -1) {
            quantity++;
        }
    })
    _.each($scope.get_lates(), function(user) {
        if ($scope.newLatesIds.indexOf(user.late_id) != -1) {
            quantity++;
        }
    })
    return quantity;
}

App.controller('wstalCtrl', function($scope, $http, $dialog, $timeout) {
    $("#dialogRemovalConfirmation").dialog({
      autoOpen: false,
      resizable: false,
      modal: true,
      closeText: "x",
      buttons: {
        "Add to black list": function() {
            $scope.delete($scope.blacklistProposal.id);
            $scope.$apply();
            $(this).dialog("close");
            $http.post('/api/blacklist', {
              blacklist: $scope.blacklistIds
            })
        },
        Cancel: function() {
            $(this).dialog("close");
        }
      },
      open: function(event, ui) {
        $('.ui-dialog-titlebar-close', ui.dialog).text('x');
        $('#proposalName').text(($scope.blacklistProposal.name));
      }
    });

    $http.get('/api/users').success(function(data){
        $scope.users = data.users;
    });

    $http.get('/api/presence').success(function(data){
        $scope.lates = data.lates;
        $scope.absences = data.absences;

        $scope.newLatesIds = [];
        $scope.newAbsencesIds = [];

        $scope.blacklistIds = data.blacklist;

        (function tick() {
            $http.get('/api/presence').success(function(data){
                parseLocalStorage($scope);

                if (firstFetchToday) {
                    updateKnownIds($scope);
                } else {
                    findNewIds($scope, data);
                }

                $scope.lates = data.lates;
                $scope.absences = data.absences;

                if (!$scope.show_box) {
                    $scope.newLatesQuantity = countNewEntries($scope);
                }
                saveToLocalStorage($scope);

                firstFetchToday = false;
                $timeout(tick, 60000);
                $('.tooltip').remove();
            });
        })();
    });


    $scope.get_lates = function(){
        return _.filter($scope.lates, function(user){
           return $scope.blacklistIds.indexOf(user.id) < 0 &&
                    !user.work_from_home;
        });
    };

    $scope.get_work_from_home = function(){
        return _.filter($scope.lates, function(user){
           return $scope.blacklistIds.indexOf(user.id) < 0 &&
                    user.work_from_home;
        });
    };

    $scope.get_absences = function(){
        return _.filter($scope.absences, function(user){
           return $scope.blacklistIds.indexOf(user.id) < 0;
        });
    };


    $scope.show = function(){
        if ($scope.show_box) {
            updateKnownIds($scope);

            $scope.newLatesIds = [];
            $scope.newAbsencesIds = [];
        }

        $scope.show_box = !$scope.show_box;
        $scope.newLatesQuantity = 0;
        saveToLocalStorage($scope);
    };


    $scope.set_time = function(time_str){
        return Date.parse(time_str)
    };

    $scope.set_date = function(date_str){
        return Date.parseExact(date_str, 'dd.MM.yy')
    };

    $scope.openModal = function(){
        updateLists($scope);

        var d = $dialog.dialog({
            resolve: {
                $callerScope: function() {return $scope}
            }
        });
        d.open('blacklist.html', 'blackListCtrl');
    };

    $scope.openRemovalConfirmation = function(user) {
        $scope.blacklistProposal = user;
        $("#dialogRemovalConfirmation").dialog("open")
    }

    $scope.delete = function(user_id){
        $scope.blacklistIds.push(user_id);
    };

});

App.controller('blackListCtrl', function($scope, $http, $timeout,
                                        dialog, $callerScope) {
    $scope.users = $callerScope.users;
    $scope.blacklistIds = $callerScope.blacklistIds;
    $scope.blacklist = $callerScope.blacklist;
    $scope.whitelist = $callerScope.whitelist;
    $scope.selectedBlack = [];
    $scope.selectedWhite = [];

    $scope.close = function(){
        dialog.close();
    };

    $scope.edit = function(){
        $callerScope.blacklistIds = $scope.blacklistIds;
        dialog.close();
        $http.post('/api/blacklist', {
            blacklist:$scope.blacklistIds
        })
    };

    $scope.allWhite = function() {
        $scope.whitelist = $scope.users;
        $scope.blacklist = [];
        $scope.blacklistIds = [];
        $scope.selectedBlack = [];
    }

    $scope.allBlack = function() {
        $scope.blacklist = $scope.users;
        $scope.whitelist = [];
        $scope.blacklistIds = $scope.blacklist.map(function (item) {
            return item.id;
        });
        $scope.selectedWhite = [];
    }

    $scope.selectedToWhite = function() {
        for (i = 0; i < $scope.selectedBlack.length; i++) {
            $scope.blacklistIds.splice($scope.blacklistIds.indexOf(
                    $scope.selectedBlack[i]), 1);
        }

        updateLists($scope);
        $scope.selectedBlack = [];
    }

    $scope.selectedToBlack = function() {
        for (i = 0; i < $scope.selectedWhite.length; i++) {
            $scope.blacklistIds[$scope.blacklistIds.length] =
                    $scope.selectedWhite[i];
        }

        updateLists($scope);
        $scope.selectedWhite = [];
    }
});

(function($){
    "use strict";

    var loadedStamp = Date.now();
    var initialWait = 30000;  // 30 sec

    var bugsUpdatedRecently = function(){
        var bug_ids = $('.bug-list tbody tr').map(function(i, el){return $(el).data('bugid');}).get();
        if(bug_ids.length){
            bug_ids = bug_ids.join(',');
            $.ajax({
                url: '/bugs_updated/',
                type: 'POST',
                data: {'bug_ids': bug_ids},
                statusCode: {
                    204: checkUpdatesAgain,
                    200: function(){
                        $('#alert_messages').append([
                            '<div class="alert alert-info hide">',
                            '<a class="close" data-dismiss="alert">&times;</a>',
                            '<strong>Bugs on this page have been updated.</strong> Refresh to see.',
                            '</div>'
                        ].join('')).find('.alert').slideDown();
                    }
                }
            });
        }
    };

    var waitMultiplier = function(){
        // increase wait every 5 min
        return Math.ceil((Date.now() - loadedStamp)/300000);
    };

    var checkUpdatesAgain = function(){
        window.setTimeout(bugsUpdatedRecently, initialWait * waitMultiplier());
    };

    $(checkUpdatesAgain);

    // blocker popovers
    var $blocked_labels = $('.blocked-bug');
    var hide_all = function(){
        $blocked_labels.popover('hide');
    };
    $blocked_labels.popover({
        title: 'Blocked By',
        content: function(){
            return $(this).find('.blocker-links').html();
        },
        trigger: 'manual',
        animation: false
    });
    $blocked_labels.on('click', function(e){
        hide_all();
        $(this).popover('toggle');
        $('a.ttip').tooltip();
        return false;
    });
    $('body').on('click', hide_all);

})(jQuery);

(function($){
    var TIMEOUT = 5 * 60 * 1000;
    
    function log(msg) {
        try {
            console.log(msg);
        } catch(e) {
            // ignore
        }
    }
    
    function resize(){
        if(typeof gadgets !== "undefined"){
            gadgets.window.adjustHeight();
        }
    }

    $(window).load(function(){
        /* if opened from calendar, set gadget height to enforce scroll */
        if (document.location.search.indexOf('container=calendar') !== -1) {
            document.getElementById('gadget').style.height = '200px';
            log('Calendar height fixing');
        }
        
        function refresh() {
            log('Issue refresh');
            var $time = $('#reload_now');
            var previous_time = $time.text();
            $time.removeClass('error').text('Ładowanie...');
            $('#gadget').load('/gadget #content', function(response, status, xhr){
                log('Refresh returned with status ' + status);
                if (status == "error") {
                    $time.addClass('error').text(previous_time);
                } else {
                    $time.removeClass('error');
                }
                resize();
            });
        }
        
        $('#reload_now').live('click', function() {
            log('Reload now clicked');
            refresh();
            return false;
        });

        /* reload gadget after timeout */
        var loop = function(){
            refresh();
            setTimeout(loop, TIMEOUT);
        }

        setTimeout(loop, TIMEOUT);
        resize();
    });
})(jQuery);


(function($){

    function set_lates_heigth() {
        $('#latesTodayContentWrapper').css('max-height', $(window).height() - 100);
    }

    $(window).resize(function() {
        set_lates_heigth();
    })

    /**
     * Add method to format string
     */
    String.prototype.format = function() {
        var pattern = /\{\d+\}/g;
        var args = arguments;
        return this.replace(pattern, function(capture) {
            return args[capture.match(/\d+/)];
        });
    };

    /**
     * Start Timer
     */
    var intervals_list = [],
        TIMEOUT = 3600;

    function clear_intervals_list(){
        var i,
            len = intervals_list.length;

        if(len > 0){
            for(i=0; i<len; i++){
                var id = intervals_list[i];
                clearInterval(id);
            }
        }
        intervals_list = [];
    }

    /**
     * Bind post for start/end timer
     * Create intervals for timers
     */
    function start_timers(){
        var total_sum_field = $('#time_entries tfoot td.sum-count');

        $('a#start-timer').each(function(i){
            var obj = $(this),
                id = obj.attr('title'),
                href = '/times/',
                timer_ts = obj.attr('date'),
                time_field = obj.parents('tr').find('td.time'),
                actual_time = time_field.text().split(':'),
                hours = parseInt(actual_time[0], 10),
                minutes = parseInt(actual_time[1], 10),
                status,
                intervalID;

            function update_time(){
                var seconds = (new Date() - timer_ts) / 1000; //seconds
                var min = (hours * 60) + minutes + (seconds / 60);

                var h = Math.floor(min / 60),
                    m = Math.floor(min % 60),
                    fm = m.toFixed();
                if (fm.length < 2) {
                    fm = "0" + fm;
                }
                time_field.text('{0}:{1}'.format(h.toFixed(), fm));
            }

            if($(this).hasClass('start')){
                status = 'start_timer';
            } else {
                status = 'stop_timer';
                timer_ts = new Date(parseInt(timer_ts, 10));
                intervalID = setInterval(update_time, TIMEOUT);
                intervals_list.push(intervalID);
                obj.parents('tr').addClass('timer_on');
            }

            $(this).click(function(e){
                e.preventDefault();
                var post_link = href + status + '?timeentry_id=' + id;

                $.post(post_link, {}, function(data){
                    var text;
                    if(data.status === 'success'){
                        if(status === 'start_timer'){
                            text = 'Stop Timer';
                            obj.removeClass('start').addClass('stop');
                            obj.addClass('btn-primary');
                            obj.parents('tr').find('input.superkurazu').addClass('off');
                            intervalID = setInterval(update_time, TIMEOUT);
                            timer_ts = new Date();
                            status = 'stop_timer';
                            obj.parents('tr').addClass('timer_on');
                        } else {
                            text = 'Start Timer';
                            time_field.text(data.time);
                            total_sum_field.text(data.total_sum);
                            obj.removeClass('stop').addClass('start');
                            obj.removeClass('btn-primary');
                            clearInterval(intervalID);
                            status = 'start_timer';
                            obj.parents('tr').removeClass('timer_on');
                        }
                        obj.text(text);
                    }
                }, 'json');
            });
        });
    }

    /**
     * Add time entry using ajax
     */
    function ajax_add_time_entry(e){
        var form = $(this).parents('form');
        var time_field = $(form).find('.time_entry_time');
        var self = this;
        var url = form.attr('action').split('?');

        url[url.length-2] = '/times/ajax_add';
        url = url.join('?');

        if(typeof form !== 'undefined'){
            e.preventDefault();
            $.post(url, form.serialize(), function(data){
                if(data.status === 'success'){
                    $(self).parents('tbody').find('tr.error, tr.success').remove();
                    $(self).parents('tbody').prepend('<tr class="success"><td colspan="5">Time entry added</tr>');
                    $('#time_entries').replaceWith(data.html);
                    time_field.val('');
                    clear_intervals_list(); // clear intervals
                    start_timers(); // start new intervals
                } else {
                    $(self).parents('tbody').find('tr.error, tr.success').remove();
                    $(self).parents('tbody').prepend('<tr class="error"><td colspan="5">'+ data.errors +'</tr>');
                }
            }, 'json');
        }
    }

    /* DOM ready */
    $(function(){
        set_lates_heigth();

        $.tablesorter.addParser({
            // set a unique id
            id: 'priority',
            is: function(s) {
                return false;
            },
            format: function(s, table, node) {
                var $node = $(node);
                var sort_attr = $node.attr('data-sort');
                return sort_attr;
            },
            // set type, either numeric or text
            type: 'numeric'
        });
        $.tablesorter.addParser({
            id: 'float',
            is: function(s) {
                return false;
            },
            format: function(s) {
                var number = s.match(/^<b>([^<]*)<\/b>$/);
                if(number){
                    number = number[1];
                } else {
                    number = s;

                }
                number = number.replace(',', '.');
                return parseFloat(number);
            },
            type: 'numeric'
        });
        $.tablesorter.addParser({
            id: 'dotdate',
            is: function(s) {
                return false;
            },
            format: function(s) {
                var parts = s.match(/(\d+)/g);
                if(parts){
                    return (new Date(parts[2], parts[1]-1, parts[0])).getTime();
                }
                return 0;
            },
            type: 'numeric'
        });
        $.tablesorter.addParser({
            id: 'sprint_bug_time',
            is: function(s) {
                return false;
            },
            format: function(s) {
                var times = s.match(/(\d+\.\d+)/g);
                return parseFloat(times[0]);
            },
            type: 'numeric'
        });
        $.tablesorter.addParser({
            // set a unique id
            id: 'status',
            is: function(s) {
                return false;
            },
            //'NEW', 'ASSIGNED', 'REOPENED', 'UNCONFIRMED', 'CONFIRMED', 'WAITING', 'RESOLVED', 'VERIFIED', 'CLOSED'
            format: function(s) {
                var result = s.toLowerCase() // severity
                    .replace(/new/, 1)
                    .replace(/assigned/, 2)
                    .replace(/reopened/, 3)
                    .replace(/confirmed/, 4)
                    .replace(/waiting/, 5)
                    .replace(/resolved/, 6)
                    .replace(/verified/, 7)
                    .replace(/closed/, 8)
                    .replace(/resolved/, 9);
                return result;
            },
            // set type, either numeric or text
            type: 'numeric'
        });
        $("table.project_times").tablesorter({
            sortList: [[6,1]],
            headers: {
                5: {
                    sorter: 'dotdate'
                },
                6: {
                    sorter: 'float'
                }

            }
        });
        $("table.sort-table").tablesorter({});
        $("table.sort-sprint-table").tablesorter({
            headers: {
                3: {
                    sorter:'priority'
                },
                7: {
                    sorter:'sprint_bug_time'
                },
                8: {
                    sorter:'status'
                }
            }
        });

        $('a.external').click(function(){
            window.open(this.href);
            return false;
        });

        $('a.fancybox').fancybox({
            'width'             : '100%',
            'height'            : '100%',
            'autoScale'         : false,
            'transitionIn'      : 'none',
            'transitionOut'     : 'none',
            'type'              : 'iframe'
        });

        start_timers(); //timers
        //$('input#add_time_entry').live('click', ajax_add_time_entry); //ajax add entry

        /**
         * Defaults settings for all datepickers
         */
        $.datepicker.setDefaults({
            showOn: "button",
            buttonImage: "/static/img/calendar.gif",
            buttonImageOnly: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'mm/dd/yy',
            firstDay: 1
        });

        var usertooltip = (function(){
            var users = {}, isShow = false, x = 0, y = 0, xhr = null;
            var get = function(uid,fn){
                if(xhr){
                    xhr.abort();
                }
                if(uid in users){
                    fn(users[uid]);
                }else{
                    xhr = $.get('/user/tooltip?user_id='+uid,function(html){
                        xhr = null;
                        users[uid] = html;
                        fn(html);
                    });
                }
            };
            var pos = function(){
                if(isShow){
                   $dom.css({
                       left:x,
                       top:y
                   });
                }
            };
            var show = function(uid){
                isShow = true;
                pos();
                $dom.html('Loading...').show();
                get(uid,function(html){
                    $dom.html(html);
                });
            };
            var hide = function(){
                isShow = false;
                $dom.hide();
            };

            var $dom = $('<div>',{
                id:'users-tootip'
            });
            $('body').append($dom);
            var _t;
            return {
                pos:function(_x,_y){
                    x = _x;
                    y = _y;
                    pos();
                },
                show:function(uid){
                    clearTimeout(_t);
                    _t = setTimeout(function(){
                        show(uid);
                    },300);
                    hide();
                },
                hide:function(){
                    clearTimeout(_t);
                    _t = setTimeout(function(){
                        hide();
                    },10);
                }
            };
        })();

        $('[class^="x-user-tooltip-"]').each(function(){
            $item = $(this);
            var uid = $item.prop('class').match(/x-user-tooltip-(\d+)/)[1];
            if(uid){
                $item.mouseenter(function(){
                    usertooltip.show(uid);
                }).mouseleave(function(){
                    usertooltip.hide();
                });
            }
        });

        $(document).mousemove(function(e){
            usertooltip.pos(e.pageX,e.pageY);
        });

        $('a.a_popup').each(function(i, el) {
            var $el;

            $el = $(el);

            $el.fancybox({
                'autoDimensions' : true,
                'scrolling' : 'no',
                'height' : '100%',
                'type' : 'ajax'
            });
        });

        $(".ajax-loader").ajaxStart(function(){
            $(this).show();
        }).ajaxStop(function(){
            $(this).hide();
        });

        $('.alt-submit').click(function(){
            /*
                Way to add alternative action and method to form and submit it.
                  <form action="/abc" method="POST" data-alt_action="/def" data-alt_method="GET">
                  <input type="submit" value="Primary submit"/>
                  <a class="alt-submit" href="#">Alternative submit</a>
                  </form>
             */
            var $form = $(this).closest('form');
            var alt_action = $form.attr('data-alt_action');
            var alt_method = $form.attr('data-alt_method');
            var old_action = $form.attr('action');
            var old_method = $form.attr('method');
            $form.attr('action', alt_action);
            $form.attr('method', alt_method);
            $form.submit();
            $form.attr('action', old_action);
            $form.attr('method', old_method);
            return false;
        });

        $('.excel-submit').click(function(){
            var $form = $(this).closest('form');
            var $input = $('<input>').attr({
                type: 'hidden',
                id: 'excel',
                name: 'excel',
                value: 'y'
            });
            $form.append($input);
            $form.submit();
            $input.remove();
            return false;
        });

        $('.datepicker-GET').datepicker({
            dateFormat: 'dd-mm-yy',
            showOn: 'focus'
        });

        $('.datepicker').datepicker({
            dateFormat: 'dd/mm/yy',
            showOn: 'focus'
        });

        $('.datepicker-dob').datepicker({
            dateFormat: 'dd/mm/yy',
            defaultDate: '01/01/1985',
            showOn: 'focus'
        });

        $('.bootstrap-tooltip').tooltip();

        $('.daterange').daterangepicker(
            {
                ranges: {
                    'Today': ['today', 'today'],
                    'Yesterday': ['yesterday', 'yesterday'],
                    'This Week': IL.weekrange(),
                    'Last Week': IL.weekrange(-1),
                    'This Month': [Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()],
                    'Last Month': [Date.today().moveToFirstDayOfMonth().add({ months: -1 }), Date.today().moveToFirstDayOfMonth().add({ days: -1 })]
                },
                opens: 'right',
                format: 'dd-MM-yyyy',
                separator: ' - ',
                startDate: Date.today().moveToFirstDayOfMonth(),
                endDate: Date.today().moveToLastDayOfMonth(),
                locale: {
                    applyLabel: 'Submit',
                    fromLabel: 'From',
                    toLabel: 'To',
                    customRangeLabel: 'Custom Range',
                    daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr','Sa'],
                    monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                    firstDay: 1
                },
                showWeekNumbers: true,
                buttonClasses: ['btn-danger']
            }
        );


        /*
        We need those selectors in 2 places so they landed here.
         */
        var $ticket_grouping = $('#ticket-grouping');
        if($ticket_grouping.length){
            var $group_by_client = $ticket_grouping.find('#group_by_client');
            var $group_by_project = $ticket_grouping.find('#group_by_project');
            var $group_by_bugs = $ticket_grouping.find('#group_by_bugs');

            $group_by_bugs.change(function(){
                if($(this).is(':checked')){
                    $group_by_client.prop('checked', true);
                    $group_by_project.prop('checked', true);
                }
            });
            $group_by_project.change(function(){
                if($(this).is(':checked')){
                    $group_by_client.prop('checked', true);
                } else {
                    $group_by_bugs.prop('checked', false);
                }
            });
            $group_by_client.change(function(){
                if(!$(this).is(':checked')){
                    $group_by_project.prop('checked', false);
                    $group_by_bugs.prop('checked', false);
                }
            });
        }

        /**
         * TYPEAHEAD FOR SELECTS
         *
         * Usage: just add typeAheadSelect class to your select control, and
         * let the magic happen!
         */
        $('.typeAheadSelect').each(function(){
            var $this = $(this);
            // Is this multi select?
            var multi = $this.is('[multiple]');
            // List for feeding the typeahead
            var values = [];
            // Map for getting selected project's ID
            var ids = {};
            // Filling these two above
            $this.find('option[value!=""]').each(function(){
                values.push($(this).text());
                ids[$(this).text()] = $(this).val();
            });
            var $multiList;
            // This is used for performance reasons. jQuery's val() is slow, indexOf is slow...
            // everything is slow!
            var multiValue = null;
            if(multi) {
                // Multi select needs additional list of selected items
                $multiList = $('<ul class="unstyled typeAheadList"/>');
                // ...and ability to remove them freely
                $multiList.on('click', 'li i.icon-remove', function(){
                    var id = $(this).parent().data('id').toString();
                    var list = _.filter($this.val(), function(item){
                        return item !== id;
                    });
                    $this.val(list).change();
                });
                // Change event for multi select
                $this.on('change', function(){
                    $multiList.html('');
                    // Readd all elements
                    var list = _.map($(this).val(), function(id){
                        var item = $this.find('option[value="'+id+'"]').text();
                        $multiList.append('<li data-id="'+id+'"><i class="icon-remove icon-red pointer" title="remove from selected items"></i> <span>'+item+'</span></li>');
                    });
                    multiValue = $(this).val();
                });
            }
            // Our input field
            var $input = $('<input type="text" autocomplete="off" />');
            if(!multi && $this.val() !== '') {
                // If anything was selected, set it as value for input
                $input.val($this.find('option:selected').text());
            } else if(multi && $this.val() !== null) {
                // ...or just trigger change event
                $this.change();
            }
            // Activate typeahead!
            $input.typeahead({
                source: values,
                // Fuzzy matching is used here. Basically, if someone types "adg",
                // "An unwanted dog" may be returned.
                // Also, duplicates are not returned for multi selects.
                matcher: function(item) {
                    // Check for duplicates first!
                    // $.val() is VERY SLOW!
                    var val = multiValue;
                    if(multi && val) {
                        var id = ids[item].toString();
                        // indexOf is SLOW!
                        for(var i=0, len=val.length; i<len; i++) {
                            if(val[i] === id) {
                                return false;
                            }
                        }
                    }
                    return fuzzyMatcher(item, this.query, 50, false);
                },
                highlighter: function(item) { return fuzzyHighlighter(item, this.query, false, 50, false); },
                // Update the original select control. This is to ensure someone
                // who can't use typeahead is still able to properly select project.
                // Also validating for incorrect values.
                updater: function(item) {
                    var id = ids[item];
                    if(!multi && id !== undefined) {
                        // For single select, just set proper value and return current item
                        $this.val(id).change();
                        return item;
                    } else if(multi && id !== undefined) {
                        // For multi select, a list of values is returned
                        // (or null if nothing is selected - then we need to initialize an empty list)
                        var selected = multiValue !== null ? multiValue : [];
                        selected.push(id);
                        // Trigger change event, to update $multiList
                        $this.val(selected).change();
                        // And clear the input field!
                        return '';
                    }
                    return item;
                }
            }).on('blur', function(){ // Checking for empty and incorrect values for single select
                if(!multi) {
                    if($(this).val() === '') {
                        $this.val('');
                    }
                    if(values.indexOf($(this).val()) < 0) {
                        $(this).val('');
                    }
                }
            }).on('keydown', function(e){ // Additional checking when user presses the Enter key
                if(e.which == 13 || e.keyCode == 13) {
                    var val = $(this).val();
                    if(val === '' && !multi) { // Empty string entered?
                        $this.val(''); // Clear select as well
                    } else if(values.indexOf(val) < 0) { // Something gibberish entered
                        if(multi) { // Clear input
                            $input.val('');
                        } else { // Clear input and select
                            $input.val('');
                            $this.val('');
                        }
                        return false; // and DON'T submit!
                    }
                }
            });
            // Add show all button
            var $button = $('<button class="btn" type="button">Show all</button>');
            $button.on('click', function(){
                // Hide our input
                $wrap.hide();
                if(multi) { // Hide multiList
                    $multiList.hide();
                }
                // Turn off change event and show
                $this.off('change').show();
            });
            // Prepare container for input and show all button
            var $wrap = $('<div class="input-append" />');
            $wrap.append($input).append($button);
            // APPEND!
            $this.after($wrap);
            if(multi) {
                $wrap.after($multiList);
            }
            // Set the same size as select minus button
            $input.width($this.outerWidth() - $button.outerWidth());
            // For multilist, set also the same height
            if(multi) {
                $multiList.css('max-height', ($this.outerHeight() - $button.outerHeight()) + 'px');
            }
            // Original select is no longer needed for user, but it's needed by
            // us to set proper form values!
            $this.hide();
        });
    });


})(jQuery);

// IH - intranet helpers
(function(IH, $, _,  undefined ){
    IH.inloop = function(delay, f){
        (function loop_f() {
            setTimeout(function(){
                f();
                loop_f();
            }, delay);
        })();
    };
}( window.IH = window.IH || {}, jQuery, _ ));

// IL - intranet library
(function(IL, $, _, Date,  undefined ){

    IL.weekrange = function(date, offset){
        if(date === undefined ){
            date = Date.today();
            offset = 0;
        } else if ( typeof(date) === 'string' || typeof(date) === 'number'){
            offset = date;
            date = Date.today();
        } else if (offset === undefined){
            offset = 0;
        }
        offset = parseInt(offset, 10);

        var first = new Date(date.getTime()), last = new Date(date.getTime());

        if(date.getDay() !== 1){
            first.moveToDayOfWeek(1, -1);
            last.moveToDayOfWeek(1, -1);
        }

        first.add({ days: 7*offset });
        last.add({ days: 7*offset });
        last.add({ days: 6});

        return [first, last];
    };

}( window.IL = window.IL || {}, jQuery, _, Date ));

function listIntoSelect(fromList, toSelect) {
    toSelect = $(toSelect);

    optionsGroups = [{name: '', options: []}];
    currentOptionsGroup = optionsGroups[0];
    $('li', fromList).each(function(index, element) {
        entry = $(element).text();
        link = $('a', element).attr('href');

        if (link == undefined) {
            currentOptionsGroup = optionsGroups[optionsGroups.length] = {name: entry, options: []};
        } else {
            currentOptionsGroup.options[currentOptionsGroup.options.length] = {
                entry: entry,
                link: link
            };
        }
    })

    _.each(optionsGroups, function(group) {
        parent = toSelect;
        if (group.name) {
            parent = $('<optgroup>', {label: group.name});
            toSelect.append(parent);
        }
        _.each(group.options, function(option) {
            parent.append($('<option>', {value: option.link}).text(option.entry));
        });
    });
}

/*
 * scrollbarWidth - from http://chris-spittles.co.uk/?p=531
 */
function scrollbarWidth() {
    var $inner = jQuery('<div style="width: 100%; height:200px;">test</div>'),
        $outer = jQuery('<div style="width:200px;height:150px; position: absolute; top: 0; left: 0; visibility: hidden; overflow:hidden;"></div>').append($inner),
        inner = $inner[0],
        outer = $outer[0];

    jQuery('body').append(outer);
    var width1 = inner.offsetWidth;
    $outer.css('overflow', 'scroll');
    var width2 = outer.clientWidth;
    $outer.remove();

    return (width1 - width2);
}


/**
 * Scrolltable
 */
function scrollTablePrepare($table) {
    var $struct = $([
        '<div class="scrolltable">',
            '<div class="floaty placeholder">',
                '<table>',
                    '<thead></thead>',
                '</table>',
            '</div>',
            '<div class="floaty topHeader">',
                '<table>',
                    '<thead></thead>',
                '</table>',
            '</div>',
            '<div class="floaty leftHeader">',
                '<table>',
                    '<tbody></tbody>',
                '</table>',
            '</div>',
            '<div class="floaty data">',
                '<div class="scrollable">',
                    '<table>',
                        '<tbody></tbody>',
                    '</table>',
                '</div>',
            '</div>',
        '</div>'
    ].join('\n'));
    // classes and IDs
    $struct.addClass($table.attr('class')).attr('id', $table.attr('id'));
    $struct.find('table').addClass($table.attr('class')).attr('id', $table.attr('id'));
    $table.find('thead tr').each(function(){
        // placeholders
        var $row = $(this),
            $phRow = $('<tr/>').addClass($row.attr('class')).attr('id', $row.attr('id'));
        $row.find('th[data-scrolltable="placeholder"]').appendTo($phRow);
        $struct.find('.placeholder table thead').append($phRow);
        // top header
        $topRow = $('<tr/>').addClass($row.attr('class')).attr('id', $row.attr('id'));
        $row.find('th').appendTo($topRow);
        $struct.find('.topHeader table thead').append($topRow);
    });
    $table.find('tbody tr').each(function(){
        // left header
        var $row = $(this),
            $leftRow = $('<tr/>').addClass($row.attr('class')).attr('id', $row.attr('id'));
        $row.find('td[data-scrolltable="leftHeader"]').appendTo($leftRow);
        $struct.find('.leftHeader table tbody').append($leftRow);
        // normal cells
        $newRow = $('<tr/>').addClass($row.attr('class')).attr('id', $row.attr('id'));
        $row.find('td').appendTo($newRow);
        $struct.find('.data table tbody').append($newRow);
    });
    $table.replaceWith($struct);
}

/*
 * setSize sets size of all divs containing tables, to expand to the whole screen.
 */
function scrollTable($base) {
    $base.addClass('scrolltable');
    var $topParent = $base.find('.topHeader'),
        $leftParent = $base.find('.leftHeader'),
        $placeholder = $base.find('.placeholder'),
        $p = $base.find('.data'),
        $scrollable = $p.find('.scrollable'),
        $data = $p.find('table'),
        lastLeft = $scrollable.scrollLeft(),
        lastTop = $scrollable.scrollTop(),
        scrollWidth = scrollbarWidth();
    // Scroll event
    $scrollable.on('scroll', function(e){
        var left = $(this).scrollLeft(),
            top = $(this).scrollTop();
        // Do something only if values have changed
        if(left != lastLeft) {
            $topParent.scrollLeft(left);
            lastLeft = left;
        }
        if(top != lastTop) {
            $leftParent.scrollTop(top);
            lastTop = top;
        }
    });
    function setSize() {
            // Width: base width - userlist width
        var width = $base.innerWidth() - $leftParent.width(),
            // Height: window height - everything above base - dayslist
            height = $(window).innerHeight() - $base.offset().top - $topParent.height(),
            // Margin compensates for scrollbars and bottom padding
            margin = detectZoom.zoom() * scrollWidth;
        $base.height(height);
        $placeholder.height($topParent.height());
        $placeholder.width($leftParent.width());

        $leftParent.css('top', $topParent.height()+'px');
        if($data.width() < width) { // Do we need horizontal scrollbar?
            $leftParent.css('bottom', '0');
            $p.css('width', ($data.width()+margin+1)+'px');
        } else {
            $leftParent.css('bottom', margin+'px');
        }
        $topParent.css('left', $leftParent.width()+'px');
        if($data.height() < height) { // Do we need vertical scrollbar?
            $topParent.css('right', '0');
            var newHeight = $data.height()+margin+1;
            $p.css('height', newHeight+'px');
            $base.height(newHeight+$topParent.height());
        } else {
            $topParent.css('right', margin+'px');
        }
        // $p is bigger to recompensate for scrollbars
        $p.css({
            top: $topParent.height()+'px',
            left: $leftParent.width()+'px'
        });
        $scrollable.height($p.height());
    }
    $(window).resize(function(e){
        setSize();
    });
    setTimeout(setSize, 10);
}

(function(){
    "use strict";

    window.Burndown = function(selector, bugs_data) {
        var self = this;
        self.$element = $(selector);
        self.$element.data('flot', self);
        self.ticks = bugs_data.burndown_axis;
        self.tip_cache = {};
        self.actual_plot = {
            data: bugs_data.burndown,
            color: '#049cdb',
            label: 'Actual',
            lines: { show: true, fill: 0.4},
            points: {show: true, fill: true, radius: 4}
        };
        self.ideal_plot = {data: [
            [bugs_data.burndown_axis[0], bugs_data.total_points],
            [bugs_data.burndown_axis[bugs_data.burndown_axis.length-1], 0]
        ], lines: {fill: false}, points: {show: false}, color: '#0f0', label: 'Ideal'};
        self.bug_plot = {data: bugs_data.bugdown, color: '#db9c04', label: 'Bugs'};
        self.completed_data = [];
        for (var i = 0; i < bugs_data.burndown_axis.length; i++) {
            var prev = i - 1;
            if (prev < 0) {
                prev = 0;
            }
            if (bugs_data.burndown[i] === undefined) {
                bugs_data.burndown[i] = 0;
            }
            self.completed_data.push([bugs_data.burndown_axis[i], bugs_data.burndown[prev][1] - bugs_data.burndown[i][1]]);
        }
        self.completed_plot = {
            data: self.completed_data,
            color: '#db9c04',
            label: 'Completed',
            bars: {show: true},
            points: {show: true, fill: true, radius: 4}
        };

        self.resize = function(){
            self.$element.css('height', function(){
                return parseInt($(this).css('width'), 10)/2;
            });
        };

        self.plothover = function(e, pos, item){
            if(item){
                showTooltip(pos.pageX, pos.pageY, self.get_tip_msg(item));
            }
            else{
                hideTooltip();
            }
        };

        self.get_tip_key = function(item){
            return item.datapoint[1];
        };

        self.get_tip_msg = function(item){
            var key = self.get_tip_key(item);
            if(!(key in self.tip_cache)){
                self.tip_cache[key] = '<strong>'+key+'</strong>';
            }
            return {'key':key, 'msg':self.tip_cache[key]};
        };

        // helper for returning the weekends in a period
        // copied from flot visitors example
        self.weekend_areas = function(axes) {
            var markings = [];
            var d = new Date(axes.xaxis.min);
            // go to the first Saturday
            d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7));
            d.setUTCSeconds(0);
            d.setUTCMinutes(0);
            // This make the markings line up with the grid.
            // Could this be time zone related?
            d.setUTCHours(-1);
            var i = d.getTime();
            do {
                // when we don't set yaxis, the rectangle automatically
                // extends to infinity upwards and downwards
                markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
                i += 7 * 24 * 60 * 60 * 1000;
            } while (i < axes.xaxis.max);

            return markings;
        };

        self.base_options = {
            xaxis: {
                mode: 'time',
                ticks: self.ticks,
                min: self.ticks[0],
                max: self.ticks[self.ticks.length-1]
            },
            yaxis: {
                min: 0,
                tickSize: 2,
                tickFormatter: parseInt
            },
            grid: {
                hoverable: true,
                clickable: true,
                markings: self.weekend_areas
            }
        };

        self.resize();

        $.plot(self.$element, [self.actual_plot, self.ideal_plot, self.completed_plot], self.base_options);

        self.$element.bind({
            plothover: self.plothover,
            resize: self.resize
        });
    };
    window.init_sprint = function(){
        $tooltip = $('<div id="tooltip"></div>').appendTo("body");
        //$('td.ttip').tooltip();
    };
    var cur_key = null;
    var $tooltip = null;
    var tooltipvisible = false;
    var showTooltip = function(x, y, contents) {
        $tooltip.css({
            top: y + 10,
            left: x + 10
        });
        if(contents.key !== cur_key){
            cur_key = contents.key;
            $tooltip.html(contents.msg);
        }
        if(!tooltipvisible){
            tooltipvisible = true;
            $tooltip.stop(true, true).fadeIn(200);
        }
    };

    var hideTooltip = function(){
        if(tooltipvisible){
            tooltipvisible = false;
            $('#tooltip').stop(true, true).fadeOut(200);
        }
    };

    $(function(){
        /* Show hide stats area, must use negative position due to flot rendering */
        $('.stats-toggle button').on('click', function(){
            if(!$(this).hasClass('active')){
                var action = $(this).is('.stats-on') ? 'removeClass' : 'addClass';
                $('.stats-container')[action]('offscreen-hide');
                $.cookie('show_pretty_graphs',
                         action === 'addClass' ? 'false' : 'true',
                         {expires: 90});
            }
        });

        var show_graphs = $.cookie('show_pretty_graphs');
        if(show_graphs !== null){
            $(show_graphs === 'false' ? '.stats-off' : '.stats-on').click();
        }

    });

})(jQuery);

$(document).ready(function(){
    (function(){
        // when user choose Edition1 project, we show him checbox button to add times to harvest application.
        var $project_id = $('#project_id');
        var check_checkbox = function(){
            var $add_to_harvest = $('#add-to-harvest');
            var id = $project_id.val();
            var project_name = $project_id.find('option[value="'+id+'"]').text();
            if(project_name.indexOf('Edition1') !== -1){
                $add_to_harvest.show()
            } else {
                $add_to_harvest.hide()
            }
        };
        check_checkbox();
        $project_id.change(function(){
            check_checkbox();
        });
    })();
    (function(){
        if( typeof types === 'undefined') return;
        // add select tag Ticket type for predefined ticket ids like M0, M1, M2 etc.
        var $ticket_desc = $('#description');
        var $ticket_type = $('#ticket-type');
        var $ticket_id = $('#ticket_id');
        var add_ticket_type_options = function(){
            _.each(types, function(type){
                $ticket_type.append($('<option></option>', {value: type.value, text:type.desc}))
            })
        };

        (function(){
            add_ticket_type_options();
            var value = $ticket_id.val();
            if(_.any(types, function(v){ return v.value===value})){
                $ticket_type.val(value);
                $ticket_id.prop('readonly', true);
            } else {
                $ticket_id.prop('readonly', false);
            }
        })();

        $ticket_type.change(function(){
            var value = $ticket_type.val();
            var text = $('#ticket-type :selected').text();
            if(value !== 'M0'){
                $ticket_id.val(value);
                $ticket_id.prop('readonly', true);
                $ticket_desc.val(text);
            } else {
                $ticket_id.val('');
                $ticket_id.prop('readonly', false);
                $ticket_desc.val('');
            }
        })
    })();
});
var Uploader = (function() {
    var initializing = false, fnTest = /xyz/.test(function() { xyz;
    }) ? /\b_super\b/ : /.*/;

    this.Class = function() {
    };

    Class.extend = function(prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {
            prototype[name] = typeof prop[name] == "function"&& typeof _super[name] == "function"&&fnTest.test(prop[name]) ? (function(name,fn) {
                return function() {
                    var tmp = this._super;
                    this._super = _super[name];
                    var ret = fn.apply(this,arguments);
                    this._super = tmp;
                    return ret;
                };
            })(name,prop[name]) : prop[name];
        }

        function Class() {
            if (!initializing&&this.init)
                this.init.apply(this,arguments);
        }


        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.extend = arguments.callee;

        return Class;
    };

    var guid = function() {
        var u = function() {
            return (Math.random()*(1 << 32)).toString(36).replace('.','');
        }
        return function() {
            return u()+u();
        }
    }();
    var Event = Class.extend({
        init: function(name,obj) {
            this.isFire = false;
            this.name = name;
            this.obj = obj||null;
            this.listeners = [];
        },
        add: function(fn,bind,args) {
            bind = bind||this.obj;

            if (this.find(fn,bind) == -1) {
                this.listeners.push({
                    fn:fn,
                    bind:bind,
                    args:args
                });
            }
        },
        find: function(fn,bind) {
            var l;
            for (var i = 0, l = this.listeners.length;i < l;++i) {
                l = this.listeners[i];
                if (l) {
                    if (l.fn == fn&&(l.bind == (bind||this.obj))) {
                        return i;
                    }
                }
            }
            return -1;
        },
        remove: function(fn,bind) {
            if (bind) {
                var i = this.find(fn,bind);
                if (i != -1) {
                    this.listeners.splice(i,1);
                }
            }
        },
        clear: function() {
            this.listeners = {};
        },
        fire: function() {
            if (!this.isFire) {
                this.isFire = true;
                args = Array.prototype.slice.call(arguments);
                for (var i = 0, len = this.listeners.length;i < len;++i) {
                    var l = this.listeners[i];
                    if (l.fn.apply(l.bind,args) === false) {
                        this.isFire = false;
                        return false;
                    }

                }
                this.isFire = false;
            }
            return true;
        }
    });

    var Events = Class.extend({

        addEvent: function(en,fn,bind) {
            bind = bind||this;
            this._events = this._events|| {};
            en = en.toLowerCase();
            var e = this._events[en];
            if (!e) {
                e = this._events[en] = new Event(en,this);
            }
            e.add(fn,bind);
        },
        addEvents: function(obj,bind) {
            for (var i in obj) {
                this.addEvent(i,obj[i],bind);
            }
        },
        removeEvent: function(en,fn,bind) {
            this._events = this._events|| {};
            en = en.toLowerCase();
            var e = this._events[en];
            if (e) {
                e.remove(fn,bind);
            }
        },
        fireEvent: function() {
            this._events = this._events|| {};

            var args = Array.prototype.slice.call(arguments);
            var en = args.shift();
            en = en.toLowerCase();
            var e = this._events[en];
            if (e) {
                return e.fire.apply(e,args);
            }
            return null;
        },
        clearEvents: function(en) {
            en = en.toLowerCase();
            var e = this._events[en];
            if (e) {
                e.clear();
            }
        }
    });

    var Uploader = Class.extend({
        init: function(el,options) {
            this._adapter = null;
            this._button(el);
            this.options = $.extend({
                autoSend:true,
                url:'/upload/',
                onAdd: function(e) {
                },
                onProgress: function(e) {
                },
                onLoad: function(e) {
                },
                onComplete: function(e) {
                },
                onError: function(e) {
                }
            },options);

        },
        _button: function(el) {
            var $el = $(el);
            if ($el.length) {
                $el.addClass('x-upload-button-wrapper');
                this.$btn = $('<div class="x-upload-button"></div>');
                $el.append(this.$btn);
                this._createInput();
            }
        },
        _createInput: function() {
            this.$btn.html('');
            var $input = $('<input class="file" type="file" name="file" />');
            this.$btn.append($input);
            $input.bind('change',$.proxy(this._onChange,this));
            this.input = $input.get(0);
        },
        _onChange: function() {
            this.getAdapter().addInput(this.input);
            this._createInput();
        },
        getAdapter: function() {
            if (!this._adapter) {
                this._adapter = Uploader.isModern ? new XHRAdapter(this.options) : new FormAdapter(this.options);
            }
            return this._adapter;
        }
    });

    var Adapter = Events.extend({
        init: function(options) {
            this.options = options;
            this._queue = [];
            this.addEvent('add',this.options.onAdd);
            this.addEvent('progress',this.options.onProgress);
            this.addEvent('load',this.options.onLoad);
            this.addEvent('complete',this.options.onComplete);
            this.addEvent('error',this.options.onError);
        },

        addRes: function(file) {
            file.id = guid();
            this._queue.push(file);
            this.fireEvent('add',file);
            if (this.options.autoSend) {
                this.next();
            }
        },
        send: function() {
            this.next();
        },
        next: function() {
            if (this._isSending) {
                return;
            }

            if (!this._queue.length) {
                this.fireEvent('complete');
                return;
            }
            this._isSending = true;

            var file = this._queue.shift();
            this.sendFile(file,$.proxy(function() {
                this._isSending = false;
                this.next();
            },this));

        },
        sendFile: function(file,fn) {
            throw new Error('Not implement Adapter::send(e,fn)');
        },
        addInput: function(input) {
            throw new Error('Not implement Adapter::addInput(input)');
        }
    });

    var buildMessage = function(data,boundary) {
        var CRLF = "\r\n";
        var parts = [];
        for (var i = 0;i < data.length;i++) {
            var item = data[i];

            var part = 'Content-Disposition: form-data; ';
            if (item.type == 'file') {
                var mime = item.mime ? item.mime : 'application/octet-stream';
                part += 'name="'+item.name+'"; filename="'+item.filename+'"'+CRLF;
                part += 'Content-Type: '+mime;
            } else {
                part += 'name="'+item.name+'"';
            }
            part += CRLF+CRLF;
            part += item.data+CRLF;
            parts.push(part);
        }
        return '--'+boundary+CRLF+parts.join('--'+boundary+CRLF)+'--'+boundary+'--'+CRLF;
    };
    var XHRAdapter = Adapter.extend({
        init: function(uploader) {
            this._super(uploader);
            this._isSending = false;

        },

        addInput: function(input) {
            for (var i = 0;i < input.files.length;i++) {
                var file = input.files[i];
                var d = {
                    name:file.fileName||file.name,
                    size:file.fileSize||file.size,
                    mime:file.type,
                    file:file
                };
                this.addRes(d);
            }
        },
        sendFile: function(e,fn) {
            var file = e.file;
            var xhr = new XMLHttpRequest();
            var s = this;
            xhr.upload.onprogress = function(ev) {
                if (ev.lengthComputable) {
                    s.fireEvent('progress', {
                        id:e.id,
                        loaded:ev.loaded,
                        total:ev.total
                    });
                }
            }
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                    try {
                        if (xhr.status !== 200) {
                            throw new Error('System error');
                        }
                        var res = null;
                        try {
                            res = eval("("+xhr.responseText+")");
                        } catch(e) {
                            throw new Error('Incorect response. Expected: JSON');
                        }
                        if (res.status == 'ok'&&res.file) {
                            s.fireEvent('load', {
                                id:e.id,
                                file:res.file
                            });
                        } else {
                            throw new Error(res.msg||res);
                        }
                    } catch(e) {
                        s.fireEvent('error', {
                            id:e.id,
                            msg:e
                        });
                    }
                    fn();
                }
            };

            var boundary = 'BOUNDARY--------------'+(new Date).getTime();

            xhr.open("POST",this.options.url,true);
            xhr.setRequestHeader("Cache-Control","no-cache");
            xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");
            xhr.setRequestHeader("X-File-Name",encodeURIComponent(e.name));
            xhr.setRequestHeader("Content-Type","multipart/form-data; boundary="+boundary);
            var reader = new FileReader();
            reader.onload = function(ev) {
                var data = buildMessage([{
                    type:'file',
                    data:ev.target.result,
                    mime:e.mime,
                    filename:e.name,
                    name:'file'
                }],boundary);
                xhr.send(data);
            };
            reader.readAsDataURL(e.file);
        }
    });
    var FormAdapter = Adapter.extend({
        sendFile: function(e,fn) {
            var form = this._createForm();
            var iframe = this._createIFrame();
            var s = this;
            iframe.bind('load', function(e) {
                var str = iframe.contents().find('body').html();
                
                var res = eval("("+str+")");
                if (res.status == 'ok'&&res.file) {
                    s.fireEvent('load', {
                        id:e.id,
                        file:res.file
                    });
                    iframe.remove();
                    form.remove();
                    fn();
                } else {
                    s.fireEvent('error', {
                        id:e.id,
                        msg:res.error
                    });
                    iframe.remove();
                    form.remove();
                    fn();
                }
            });
            form.attr('target',iframe.attr('name'));
            form.append(e.input);
            form.submit();

        },
        addInput: function(input) {
            this.addRes({
                name:input.value,
                input:input
            });
        },
        _createForm: function() {
            var form = $('<form action="'+this.options.url+'" style="display:none" method="post" enctype="multipart/form-data"></form>');
            $(document.body).append(form);
            return form;
        },
        _createIFrame: function() {
            var sid = guid();
            var iframe = $('<iframe style="display:none" src="javascript:false;" name="'+sid+'" id="'+sid+'" />');
            $(document.body).append(iframe);
            return iframe;
        }
    });

    Uploader.isModern = (function() {var i = $('<input type="file" />');         return 'multiple' in i.get(0);    })();
    return Uploader


})();


angular.module("intranet").run(["$templateCache", function($templateCache) {

  $templateCache.put("absence.html",
    "<div class=\"modal-header\">\n" +
    "    <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\">x</button>\n" +
    "    <h3>Absence / Holiday</h3>\n" +
    "</div>\n" +
    "\n" +
    "<div id=\"absenceForm\" class=\"modal-body modal-form\">\n" +
    "    <h6>IMPORTANT !!!!!!!</h6>\n" +
    "    <div class=\"space\">\n" +
    "        Jeżeli nieobecność przecina koniec miesiąca lub roku, proszę ją rozbić na dwa wnioski urlopowe tak, aby dany wniosk miescił się w jednym miesiącu. W przypadku nieprawidłowości z wymiarem urlopu, proszę zgłosić się do asystentki.\n" +
    "    </div>\n" +
    "    <div class=\"space\">\n" +
    "        Według tych dat zostanie dodana nieobecność do kalendarza:\n" +
    "    </div>\n" +
    "\n" +
    "    <form name=\"absenceForm\" class=\"form-horizontal\" ng-class=\"{submitted: form_submitted}\" novalidate=\"\">\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Start</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"errors\" ng-show=\"errors.popup_date_start\">{{errors.popup_date_start}}</div>\n" +
    "                <div class=\"description\">Format DD/MM/RRRR</div>\n" +
    "                <input class=\"datepicker\" name=\"popup_date_start\" type=\"text\" ng-model=\"absence.popup_date_start\" ng-change=\"updateDays()\" jqdatepicker=\"\" default-date=\"today\" required=\"\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">End</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"errors\" ng-show=\"errors.popup_date_end\">{{errors.popup_date_end}}</div>\n" +
    "                <div class=\"description\">Format DD/MM/RRRR</div>\n" +
    "                <input class=\"datepicker\" name=\"popup_date_end\" type=\"text\" ng-model=\"absence.popup_date_end\" ng-change=\"updateDays()\" jqdatepicker=\"\" required=\"\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"errors\" ng-show=\"errors.absence_days\">{{errors.absence_days}}</div>\n" +
    "        <div class=\"row-fluid\">\n" +
    "            <div class=\"control-group span4\">\n" +
    "                <label class=\"control-label\">Liczba dni</label>\n" +
    "                <input type=\"text\" value=\"{{days}}\" disabled=\"disabled\">\n" +
    "            </div>\n" +
    "            <div class=\"control-group span4\">\n" +
    "                <label class=\"control-label\">Wymiar</label>\n" +
    "                <input type=\"text\" value=\"{{mandated}}\" disabled=\"disabled\">\n" +
    "            </div>\n" +
    "            <div class=\"control-group span4\">\n" +
    "                <label class=\"control-label\">Pozostało</label>\n" +
    "                <input ng-class=\"{error: left < 0}\" type=\"text\" value=\"{{left}}\" disabled=\"disabled\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"clear\"></div>\n" +
    "        <div>\n" +
    "            <b>Liczba dni</b>: Tyle dni urlopu zostanie dodane do przepracowanych godzin.\n" +
    "        </div>\n" +
    "        <div>\n" +
    "            W przypadku brania urlopu za okres choroby należy wybrać urlop <b>planowany</b>.\n" +
    "        </div>\n" +
    "        <div>\n" +
    "            <b>L4</b> jest tylko dla osób na umowę o pracę (godziny dopisują się do intranetu).\n" +
    "        </div>\n" +
    "        <div>\n" +
    "            <b>Okolicznościowy</b> - tylko dla osób na umowę o pracę, opis należy dodać w uwagach.\n" +
    "        </div>\n" +
    "        <div class=\"space\">\n" +
    "            <b>Nieobecność</b> - dodaje się tylko do kalendarza, a nie do godzin przepracowanych.\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Type</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"description\">Rodzaj</div>\n" +
    "                <select name=\"popup_type\" ng-model=\"absence.popup_type\" required=\"\">\n" +
    "                    <option value=\"planowany\" selected=\"selected\">Planned leave</option>\n" +
    "                    <option value=\"zadanie\">Leave at request</option>\n" +
    "                    <option value=\"l4\">Illness</option>\n" +
    "                    <option value=\"okolicznosciowy\">Compassionate leave</option>\n" +
    "                    <option value=\"inne\">Absence</option>\n" +
    "                </select>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "        <div class=\"space\">\n" +
    "            Proszę o wpisanie, czy będzie się dostępnym pod telefonem i czy będzie się miało dostęp do Internetu.\n" +
    "        </div>\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Remarks</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"errors\" ng-show=\"errors.popup_remarks\">{{errors.popup_remarks}}</div>\n" +
    "                <div class=\"description\">Uwagi</div>\n" +
    "                <textarea name=\"popup_remarks\" ng-model=\"absence.popup_remarks\" required=\"\"></textarea>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </form>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"modal-footer\">\n" +
    "    <button class=\"btn btn-primary\" type=\"submit\" ng-click=\"add()\" ng-disabled=\"form_submitted\">Submit</button>\n" +
    "</div>"
  );

  $templateCache.put("blacklist.html",
    "<div>\n" +
    "  <div class=\"modal-header\">\n" +
    "    <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\">×</button>\n" +
    "    <h3 id=\"black_list_header\">Settings</h3>\n" +
    "  </div>\n" +
    "\n" +
    "  <div class=\"modal-body\">\n" +
    "\n" +
    "      <div class=\"black_list_select\">\n" +
    "          <h4 id=\"black_list_header\">Users</h4>\n" +
    "          <select ng-model=\"selectedWhite\" ng-options=\"item.id as item.name for item in whitelist\" multiple=\"multiple\">\n" +
    "\n" +
    "          </select>\n" +
    "      </div>\n" +
    "\n" +
    "      <div id=\"black_list_controls\">\n" +
    "        <input type=\"button\" value=\">>\" ng-click=\"allBlack()\">\n" +
    "        <input type=\"button\" value=\">\" ng-click=\"selectedToBlack()\">\n" +
    "        <input type=\"button\" value=\"<\" ng-click=\"selectedToWhite()\">\n" +
    "        <input type=\"button\" value=\"<<\" ng-click=\"allWhite()\">\n" +
    "      </div>\n" +
    "\n" +
    "      <div class=\"black_list_select\">\n" +
    "          <h4 id=\"black_list_header\">Black List</h4>\n" +
    "          <select ng-model=\"selectedBlack\" ng-options=\"item.id as item.name for item in blacklist\" multiple=\"multiple\">\n" +
    "\n" +
    "          </select>\n" +
    "      </div>\n" +
    "\n" +
    "    <div class=\"pull-right\">\n" +
    "      <button class=\"btn btn-primary\" type=\"submit\" ng-click=\"edit()\">Submit</button>\n" +
    "    </div>\n" +
    "\n" +
    "  </div>\n" +
    "</div>"
  );

  $templateCache.put("form/timepicker.html",
    "<div class=\"control-group\">\n" +
    "    <label class=\"control-label\" ng-transclude=\"\"></label>\n" +
    "    <div class=\"controls\">\n" +
    "        <div class=\"errors\" ng-show=\"$parent.errors[name]\">{{$parent.errors[name]}}</div>\n" +
    "        <div class=\"description\">Format HH:MM</div>\n" +
    "        <div class=\"input-append\">\n" +
    "            <input class=\"input-small\" type=\"text\" ng-model=\"ngModel\" bs-timepicker=\"\" show-meridian=\"false\" required=\"\">\n" +
    "            <span class=\"add-on\" data-toggle=\"timepicker\"><i class=\"icon-time\"></i></span>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>"
  );

  $templateCache.put("lateness.html",
    "<div class=\"modal-header\">\n" +
    "    <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\" ng-show=\"modal\">x</button>\n" +
    "    <h3 id=\"lateness_header\">Out of office request</h3>\n" +
    "</div>\n" +
    "\n" +
    "<div id=\"latenessForm\" class=\"modal-form modal-body\">\n" +
    "    <form name=\"latenessForm\" class=\"form-horizontal\" ng-class=\"{submitted: form_submitted}\" novalidate=\"\">\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Date</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"errors\" ng-show=\"errors.popup_date\">{{errors.popup_date}}</div>\n" +
    "                <div class=\"description\">Format DD/MM/RRRR</div>\n" +
    "                <input class=\"datepicker\" name=\"popup_date\" type=\"text\" ng-model=\"lateness.popup_date\" jqdatepicker=\"\" required=\"\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <form-timepicker name=\"late_start\" ng-model=\"lateness.late_start\" default-time=\"09:00\">From</form-timepicker>\n" +
    "\n" +
    "        <form-timepicker name=\"late_end\" ng-model=\"lateness.late_end\" default-time=\"17:00\">To</form-timepicker>\n" +
    "\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Work From Home</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <input id=\"work_from_home\" name=\"work_from_home\" type=\"checkbox\" value=\"y\" ng-model=\"lateness.work_from_home\">\n" +
    "            </div>\n" +
    "        </div>\n" +
    "\n" +
    "        <div class=\"control-group\">\n" +
    "            <label class=\"control-label\">Explanation</label>\n" +
    "            <div class=\"controls\">\n" +
    "                <div class=\"errors\" ng-show=\"errors.popup_explanation\">{{errors.popup_explanation}}</div>\n" +
    "                <div class=\"description\">Wyjaśnienie</div>\n" +
    "                <textarea id=\"popup_explanation\" name=\"popup_explanation\" ng-model=\"lateness.popup_explanation\" required=\"\"></textarea>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </form>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"modal-footer\">\n" +
    "    <button class=\"btn btn-primary\" type=\"submit\" ng-click=\"add()\" ng-disabled=\"form_submitted\">Submit</button>\n" +
    "</div>"
  );

  $templateCache.put("modalConfirm.html",
    "<div class=\"modal modal-confirm\">\n" +
    "    <div class=\"pull-left\" ng-bind-html=\"message\"></div>\n" +
    "    <button class=\"close\" ng-click=\"close()\">x</button>\n" +
    "</div>"
  );

  $templateCache.put("scrum/sprint/boards.html",
    "<div class=\"modal-header\">\n" +
    "  <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\">x</button>\n" +
    "  <h3>Boards</h3>\n" +
    "</div>\n" +
    "<div id=\"boards-modal\">\n" +
    "  <div>\n" +
    "    <img ng-show=\"boards === undefined && !boards_error\" src=\"/static/img/ajax.gif\">\n" +
    "    <span ng-show=\"boards.length === 0\">No boards</span>\n" +
    "    <span ng-show=\"boards_error\">Cannot fetch boards</span>\n" +
    "  </div>\n" +
    "  <div ng-show=\"boards.length > 0\">\n" +
    "    <label class=\"checkbox\">\n" +
    "      <input type=\"checkbox\" ng-model=\"only_my\"> Show only my\n" +
    "    </label>\n" +
    "    <select ng-disabled=\"boards.length == 0\" ng-model=\"selected_board\" ng-options=\"board as board.name + get_name(board) for board in get_boards() | orderBy:'name'\"></select>\n" +
    "    <a class=\"btn\" ng-click=\"clone()\" ng-show=\"selected_board.id\">Clone to current sprint</a>\n" +
    "    <a class=\"btn btn-danger\" ng-show=\"selected_board.id !== undefined && selected_board.user.id == G.user.id\" ng-click=\"delete()\">Delete</a>\n" +
    "  </div>\n" +
    "</div>"
  );

  $templateCache.put("scrum/sprint/bugsJson.html",
    "<div class=\"modal-header\">\n" +
    "  <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\">x</button>\n" +
    "  <h3>Bugs</h3>\n" +
    "</div>\n" +
    "\n" +
    "<span ng-show=\"bugs_error\">There was something wrong with request</span>\n" +
    "<img ng-show=\"!bugs && !bugs_error\" src=\"/static/img/ajax.gif\">\n" +
    "<pre id=\"sprint-json-bugs\" ng-show=\"bugs\">{{ bugs }}</pre>"
  );

  $templateCache.put("scrum/sprint/edit.html",
    "<div id=\"sprint-editor\" ng-controller=\"sprintEditCtrl\" style=\"margin-left: 85px\">\n" +
    "    <div>\n" +
    "        <a class=\"btn\" ng-click=\"show_boards()\">Show boards</a>\n" +
    "        <a class=\"btn\" ng-show=\"sprintId\" ng-click=\"show_bugs()\">Show bugs</a>\n" +
    "    </div>\n" +
    "\n" +
    "    <input type=\"hidden\" name=\"board\" ng-value=\"columns_json()\">\n" +
    "\n" +
    "    <a class=\"add-column btn add-column\" ng-click=\"add_column()\">Add column</a>\n" +
    "\n" +
    "    <div id=\"task_board_container\">\n" +
    "        <table class=\"table table-bordered task_board\">\n" +
    "            <thead>\n" +
    "                <tr>\n" +
    "                    <th ng-repeat=\"column in columns\">\n" +
    "                        <a class=\"board-remove\" ng-show=\"columns.length > 1\" ng-click=\"remove_column(column)\"><i class=\"icon-remove\"></i></a>\n" +
    "                        <span class=\"field\">\n" +
    "                            <input class=\"unsubmittable\" type=\"text\" ng-model=\"column.name\" placeholder=\"Column name\">\n" +
    "                        </span>\n" +
    "                    </th>\n" +
    "                </tr>\n" +
    "            </thead>\n" +
    "            <tbody>\n" +
    "                <tr>\n" +
    "                    <td ng-repeat=\"column in columns\">\n" +
    "                        <div class=\"board-column\">\n" +
    "                            <div class=\"board-section\" ng-repeat=\"section in column.sections\">\n" +
    "                                <a class=\"board-remove\" ng-show=\"column.sections.length > 1\" ng-click=\"remove_section(section, column.sections)\"><i class=\"icon-remove\"></i></a>\n" +
    "                                <span class=\"field\"><input class=\"unsubmittable\" type=\"text\" ng-model=\"section.name\" placeholder=\"Section name\"></span>\n" +
    "                                <span class=\"field\"><textarea class=\"unsubmittable\" ng-model=\"section.cond\" placeholder=\"Query\"></textarea></span>\n" +
    "                            </div>\n" +
    "                            <a class=\"btn btn-small\" ng-click=\"add_section(column)\">Add section</a>\n" +
    "                        </div>\n" +
    "\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "            </tbody>\n" +
    "        </table>\n" +
    "    </div>\n" +
    "    <a class=\"btn\" ng-click=\"save()\">Save this board</a>\n" +
    "\n" +
    "</div>"
  );

  $templateCache.put("team.html",
    "<div>\n" +
    "  <div class=\"modal-header\">\n" +
    "    <button class=\"close\" aria-hidden=\"true\" ng-click=\"close()\">×</button>\n" +
    "    <h3 ng-show=\"!team.id\">Add Team</h3>\n" +
    "    <h3 ng-show=\"team.id\">Edit Team</h3>\n" +
    "  </div>\n" +
    "  <div>\n" +
    "  </div>\n" +
    "  <div class=\"modal-body\">\n" +
    "    <form name=\"teamForm\" class=\"form-horizontal\" ng-class=\"{submitted: form_submitted}\" novalidate=\"\">\n" +
    "\n" +
    "      <div class=\"control-group\">\n" +
    "        <label class=\"control-label\">Name</label>\n" +
    "        <div class=\"controls\">\n" +
    "          <input name=\"name\" type=\"text\" ng-model=\"team.name\" required=\"\">\n" +
    "        </div>\n" +
    "      </div>\n" +
    "\t    <div>\n" +
    "\t\t    <dl>\n" +
    "\t\t\t    <dt>Image:</dt>\n" +
    "\t\t\t    <dd id=\"my-avatar\">\n" +
    "\t\t\t\t    <img ng-src=\"{{ team.img }}\">\n" +
    "\t\t\t\t    <span id=\"upload-btn\" ng-click=\"uploader()\"></span>\n" +
    "\t\t\t    </dd>\n" +
    "\t\t    </dl>\n" +
    "\t    </div>\n" +
    "\n" +
    "      <div class=\"alert alert-error\" ng-bind=\"error\" ng-show=\"error\"></div>\n" +
    "\n" +
    "      <div class=\"pull-right\">\n" +
    "        <button class=\"btn btn-primary\" type=\"submit\" ng-show=\"!team.id\" ng-click=\"add()\">Submit</button>\n" +
    "        <button class=\"btn btn-primary\" type=\"submit\" ng-show=\"team.id\" ng-click=\"edit()\">Submit</button>\n" +
    "      </div>\n" +
    "    </form>\n" +
    "  </div>\n" +
    "</div>"
  );

  $templateCache.put("teams.html",
    "<div class=\"tabs\">\n" +
    "    <ul class=\"nav nav-tabs\">\n" +
    "      <li class=\"title\">Teams</li>\n" +
    "    </ul>\n" +
    "  </div>\n" +
    "<div ng-controller=\"oneCtrl\">\n" +
    "  <div class=\"frame_team ng-cloak\">\n" +
    "    <div ng-show=\"show_users && G.user.has_perm('can_edit_teams')\" class=\"box box-users\">\n" +
    "      <h2 class=\"title\"><i ng-click=\"toggle_users()\" class=\"icon-arrow-right users-hide\"></i>Users</h2>\n" +
    "      <div class=\"input-prepend users-input-search\">\n" +
    "        <span class=\"add-on add-on-icon\"><i class=\"icon-search\"></i></span>\n" +
    "        <input id=\"add-on-input\" type=\"text\" ng-model=\"userSearch\">\n" +
    "      </div>\n" +
    "      <div class=\"team-less\">\n" +
    "        Teamless: <input type=\"checkbox\" ng-model=\"teamless\">\n" +
    "      </div>\n" +
    "      <div class=\"clear\"></div>\n" +
    "      <ul class=\"users\" data-drop=\"true\" ng-model=\"users\">\n" +
    "        <li data-drag=\"true\" data-jqyoui-options=\"{revert: 'invalid', helper: 'clone'}\" ng-repeat=\"item in (filtered_users = (get_users() | filter:userSearch))\" ng-model=\"filtered_users\" jqyoui-draggable=\"{index: {{$index}},animate:false,placeholder:'keep'}\" user-id=\"{{ item.id }}\" ng-hide=\"!item.name\">\n" +
    "          <img class=\"user-avatar\" ng-src=\"{{ item.img }}\">\n" +
    "          <div class=\"user-name-outer\">\n" +
    "            <div class=\"user-name-middle\">\n" +
    "              <div class=\"user-name-inner\">\n" +
    "                {{item.name}}\n" +
    "              </div>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "        </li>\n" +
    "      </ul>\n" +
    "    </div>\n" +
    "    <div class=\"box box-teams\">\n" +
    "      <h2 class=\"title\">Teams</h2>\n" +
    "      <button class=\"btn btn-primary\" ng-click=\"openModal()\" ng-show=\"G.user.has_perm('can_edit_teams')\">Add team</button>\n" +
    "      <div class=\"input-prepend teams-input-search\">\n" +
    "        <span class=\"add-on\"><i class=\"icon-search\"></i></span>\n" +
    "        <input type=\"text\" ng-model=\"teamSearch\">\n" +
    "      </div>\n" +
    "      <i ng-click=\"toggle_users()\" ng-hide=\"show_users || !G.user.has_perm('can_edit_teams')\" class=\"icon-arrow-left\" ng-show=\"G.user.has_perm('can_edit_teams')\"></i>\n" +
    "      <div class=\"clear\"></div>\n" +
    "      <div class=\"team-box\">\n" +
    "        <ul>\n" +
    "          <li ng-repeat=\"team in teams | filter:teamSearch | orderBy:'workedHoursLastMonth':true\">\n" +
    "            <div class=\"name_team\">{{ team.name }}\n" +
    "              <i class=\"icon-edit\" ng-click=\"openModal(team)\" ng-show=\"G.user.has_perm('can_edit_teams')\"></i>\n" +
    "              <i class=\"icon-remove icon-red\" ng-show=\"!team.dirty && G.user.has_perm('can_edit_teams')\" ng-click=\"deleteTeam(team)\"></i>\n" +
    "              <i class=\"icon-ok icon-green\" ng-show=\"team.dirty && G.user.has_perm('can_edit_teams')\" ng-click=\"save(team)\"></i>\n" +
    "            </div>\n" +
    "            <div class=\"icon_team\">\n" +
    "              <img ng-src=\"{{ team.img }}\">\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"project-list\" ng-show=\"!show_users\">\n" +
    "              <div class=\"project-record\" ng-repeat=\"project in team.projects\">\n" +
    "                <div class=\"project-name\">\n" +
    "                  <a class=\"client\" href=\"/client/view?client_id={{ project.client.id }}\" title=\"{{ project.client.name }}\" ng-show=\"G.user.has_perm('can_edit_teams')\">{{ project.client.name }}</a>\n" +
    "                  <span class=\"client\" title=\"{{ project.client.name }}\" ng-show=\"!G.user.has_perm('can_edit_teams')\">{{ project.client.name }}</span>\n" +
    "                  /\n" +
    "                   <a class=\"project\" href=\"/project/client/backlog?project_id={{ project.id }}\" title=\"{{ project.name }}\">{{ project.name }}</a>\n" +
    "                </div>\n" +
    "                <div class=\"project-worked-hours\">\n" +
    "                  <a href=\"{{ project.monthTimesUrl }}\" bs-tooltip=\"thisMonthWorkedHoursTooltip\">{{ project.this_month_worked_hours }}</a>\n" +
    "                  <a href=\"{{ project.previousMonthTimesUrl }}\" bs-tooltip=\"lastMonthWorkedHoursTooltip\">({{ project.last_month_worked_hours }})</a>\n" +
    "                </div>\n" +
    "                <br>\n" +
    "              </div>\n" +
    "            </div>\n" +
    "\n" +
    "            <div class=\"desc_team\">\n" +
    "              <div class=\"team thumbnail\" data-drop=\"true\" ng-model=\"team.users\" jqyoui-droppable=\"{multiple:true,onBeforeDrop:'onBeforeDrop'}\" data-jqyoui-options=\"teamOptions\">\n" +
    "                <div class=\"alert user\" ng-repeat=\"item in team.users\" data-drag=\"true\" data-jqyoui-options=\"{revert: 'invalid'}\" ng-model=\"team.users\" jqyoui-draggable=\"{index: {{$index}},animate:false}\" ng-class=\"overclass\" ng-mouseover=\"overclass = 'show_x'\" ng-mouseleave=\"overclass = 'hide_x'\" user-id=\"{{ item.id }}\" user-tooltip=\"item\">\n" +
    "                     <img ng-src=\"{{ item.img }}\">\n" +
    "                  <button type=\"button\" class=\"close\" ng-click=\"deleteUser(item, team)\" ng-show=\"G.user.has_perm('can_edit_teams')\">&times;</button></div>\n" +
    "                <div class=\"help_text\" ng-show=\"G.user.has_perm('can_edit_teams')\">Przeciągnij tutaj użytkownika</div>\n" +
    "              </div>\n" +
    "            </div>\n" +
    "          </li>\n" +
    "        </ul>\n" +
    "      </div>\n" +
    "    </div>\n" +
    "    <div class=\"clear\"></div>\n" +
    "  </div>\n" +
    "  <div class=\"clear\"></div>\n" +
    "</div>"
  );

  $templateCache.put("users-mobile.html",
    "<div id=\"employees\">\n" +
    "    <div class=\"tabs\">\n" +
    "\n" +
    "    <ul class=\"nav nav-tabs\">\n" +
    "       <li class=\"active\"><a data-toggle=\"tab\" ng-click=\"set_tab('employees')\">Employees ({{ get_employees().length }})</a></li>\n" +
    "        <li class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('freelancers')\">Freelancers ({{ get_freelancers().length }})</a></li>\n" +
    "        <li class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('clients')\">Clients ({{ get_clients().length }})</a></li>\n" +
    "        <li ng-show=\"G.user.has_perm('can_see_inactive_users')\" class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('inactive')\">Inactive ({{ get_inactive().length }})</a></li>\n" +
    "    </ul>\n" +
    "\n" +
    "    <div class=\"tab-content\">\n" +
    "        <div class=\"tab-pane fade in active\">\n" +
    "            <table id=\"user-list-mobile\" class=\"table table-bordered table-hover user-list width_auto\">\n" +
    "            <thead>\n" +
    "                <th>&nbsp;</th>\n" +
    "                <th class=\"name\" ng-click=\"predicate = 'name'; reverse=!reverse\">Employee's name</th>\n" +
    "                <th class=\"contact\">Phone</th>\n" +
    "            </thead>\n" +
    "            <tbody>\n" +
    "                <tr ng-repeat=\"user in get_users() | orderBy:predicate:reverse\">\n" +
    "                    <td><img class=\"avatar\" src=\"{{user.avatar_url}}\" alt=\"{{user.name}} [{{user.email}}]\"></td>\n" +
    "                    <td class=\"name\">\n" +
    "                        <div><a ng-href=\"/user/view?user_id={{ user.id }}\">{{user.name}}</a> ( {{user.location[2] }} )</div>\n" +
    "                    </td>\n" +
    "                    <td class=\"contact-info\">\n" +
    "                        <a href=\"tel:{{ user.phone }}\" ng-show=\"user.phone\">{{ user.phone }}</a>\n" +
    "                    </td>\n" +
    "                </tr>\n" +
    "            </tbody>\n" +
    "         </table>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div></div>"
  );

  $templateCache.put("users.html",
    "<div ng-controller=\"usersCtrl\" id=\"employees\">\n" +
    "    <div class=\"row-fluid\">\n" +
    "        <form class=\"form-horizontal\">\n" +
    "             <div class=\"row\">\n" +
    "                 <input ng-model=\"search.name\" type=\"text\" placeholder=\"Employee's name\">\n" +
    "                 <input type=\"text\" ng-model=\"search.start_work\" placeholder=\"Start work\" date-range-picker=\"\">\n" +
    "                 <input type=\"text\" ng-model=\"search.stop_work\" placeholder=\"Stop work\" date-range-picker=\"\">\n" +
    "                 <select ng-model=\"search.time_works\" title=\"Full time\" ng-options=\"time_work.id as time_work.name for time_work in time_works\" bs-select=\"\">\n" +
    "                 </select>\n" +
    "                 <select class=\"input-medium\" ng-model=\"dob.chosen\" ng-options=\"year for year in dob.years\" ng-change=\"dob.select_year()\">\n" +
    "                 </select>\n" +
    "                 <input class=\"input-mini\" ng-show=\"dob.is_custom()\" ng-model=\"dob.start\" type=\"number\">\n" +
    "                 <input class=\"input-mini\" ng-show=\"dob.is_custom()\" ng-model=\"dob.end\" type=\"number\">\n" +
    "             </div>\n" +
    "             <div class=\"row below\">\n" +
    "               <select ng-model=\"search.groups\" multiple=\"multiple\" title=\"Choose group\" ng-options=\"group.id as group.name + ' (' + group.counter + ')' for group in groups\" bs-select=\"\">\n" +
    "               </select>\n" +
    "                <select ng-model=\"search.roles\" multiple=\"multiple\" title=\"Choose role\" ng-options=\"role.id as role.name + ' (' + role.counter + ')' for role in roles\" bs-select=\"\">\n" +
    "                </select>\n" +
    "                <select ng-model=\"search.locations\" multiple=\"multiple\" title=\"Choose location\" ng-options=\"c.id as c.name + ' (' + c.counter + ')' for c in locations\" bs-select=\"\">\n" +
    "                </select>\n" +
    "                <select ng-model=\"search.teams\" multiple=\"multiple\" title=\"Choose team\" ng-options=\"team.id as team.name + ' (' + team.active_user_counter + ')' for team in teams\" bs-select=\"\">\n" +
    "                </select>\n" +
    "             </div>\n" +
    "        </form>\n" +
    "    </div>\n" +
    "\n" +
    "    <div class=\"tabs\">\n" +
    "    <ul class=\"nav nav-tabs\">\n" +
    "       <li class=\"active\"><a data-toggle=\"tab\" ng-click=\"set_tab('employees')\">Employees ({{ get_employees().length }})</a></li>\n" +
    "        <li class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('freelancers')\">Freelancers ({{ get_freelancers().length }})</a></li>\n" +
    "        <li class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('clients')\">Clients ({{ get_clients().length }})</a></li>\n" +
    "        <li ng-show=\"G.user.has_perm('can_see_inactive_users')\" class=\"\"><a data-toggle=\"tab\" ng-click=\"set_tab('inactive')\">Inactive ({{ get_inactive().length }})</a></li>\n" +
    "    </ul>\n" +
    "\n" +
    "    <div class=\"tab-content\">\n" +
    "        <div class=\"tab-pane fade in active\">\n" +
    "            <table id=\"oo\" class=\"table table-bordered table-hover user-list width_auto\">\n" +
    "            <thead>\n" +
    "                <th class=\"avatar\">&nbsp;</th>\n" +
    "                <th class=\"name\" ng-click=\"predicate = 'name'; reverse=!reverse\">Employee's name</th>\n" +
    "                <th class=\"contact\">Contact</th>\n" +
    "                <th class=\"role\">Role</th>\n" +
    "                <th class=\"groups\">Groups</th>\n" +
    "                <th class=\"teams\">Teams</th>\n" +
    "                <th ng-click=\"predicate = 'start_work'; reverse=!reverse\">Start work</th>\n" +
    "                <th ng-click=\"predicate = 'stop_work'; reverse=!reverse\">End work</th>\n" +
    "                <th>Date of birth</th>\n" +
    "            </thead>\n" +
    "            <tbody>\n" +
    "                <tr ng-repeat=\"user in get_users() | orderBy:predicate:reverse\">\n" +
    "                    <td class=\"email\"><img src=\"{{user.avatar_url}}\" alt=\"{{user.name}} [{{user.email}}]\"></td>\n" +
    "                    <td class=\"name\">\n" +
    "                        <div><a ng-href=\"/user/view?user_id={{ user.id }}\">{{user.name}}</a> ( {{user.location[2] }} )</div>\n" +
    "                    </td>\n" +
    "                    <td class=\"contact-info\">\n" +
    "                        <a href=\"mailto:{{ user.email }}\">{{ user.email }}</a><br><br>\n" +
    "                            <label ng-show=\"user.phone\">Cellphone:<br><span>{{ user.phone }}</span><br></label>\n" +
    "                            <label ng-show=\"user.phone_on_desk\">Deskphone:<br><span>{{ user.phone_on_desk }}</span><br></label>\n" +
    "                            <label ng-show=\"user.skype\">Skype:<br><span>{{ user.skype }}</span><br></label>\n" +
    "                            <label ng-show=\"user.irc\">IRC:<br><span>{{ user.irc }}</span><br></label>\n" +
    "                    </td>\n" +
    "                    <td>\n" +
    "                        <div ng-repeat=\"role in user.roles\">{{ to_pretty_role(role) }}</div>\n" +
    "                    </td>\n" +
    "                  <td>\n" +
    "                    <div ng-repeat=\"group in user.groups\">{{ group }}</div>\n" +
    "                  </td>\n" +
    "                    <td>\n" +
    "                        <div ng-repeat=\"team in user.teams\">{{ team.name }}</div>\n" +
    "                    </td>\n" +
    "                    <td>{{ user.start_work }}</td>\n" +
    "                    <td>{{ user.stop_work }}</td>\n" +
    "                    <td>{{ user.date_of_birth }}</td>\n" +
    "                </tr>\n" +
    "\n" +
    "            </tbody>\n" +
    "         </table>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "\n" +
    "</div>\n" +
    "</div>"
  );

  $templateCache.put("wstal.html",
    "<div id=\"floatBox\" ng-controller=\"wstalCtrl\">\n" +
    "    <div id=\"latesTodayWrapper\">\n" +
    "        <div id=\"floatDiv\" ng-show=\"show_box\">\n" +
    "            <div id=\"latesTodayContentWrapper\">\n" +
    "                <table class=\"table table-bordered presence\" id=\"late\">\n" +
    "                    <tbody>\n" +
    "                        <tr ng-show=\"get_lates().length == 0 && get_absences().length == 0 && get_work_from_home().length == 0\">\n" +
    "                            <td colspan=\"4\" class=\"lates-column-header-empty\" id=\"empty_box\">\n" +
    "                                E M P T Y !\n" +
    "                            </td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                        <tr ng-show=\"get_absences().length > 0\">\n" +
    "                            <td colspan=\"2\" class=\"lates-column-header\">ABSENCE / HOLIDAY</td>\n" +
    "                            <td class=\"lates-column-header-date\"><span bs-tooltip=\"'Start date of absence'\">From</span></td>\n" +
    "                            <td class=\"lates-column-header-date\"><span bs-tooltip=\"'End date of absence'\">To</span></td>\n" +
    "                        </tr>\n" +
    "                        <tr class=\"absence-record\" ng-repeat=\"user in get_absences()\" data-placement=\"left\" bs-tooltip=\"user.remarks\">\n" +
    "                            <td>\n" +
    "                                <button class=\"close\" aria-hidden=\"true\" ng-click=\"openRemovalConfirmation(user)\">×</button>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-user\">\n" +
    "                                <span class=\"name\" ng-bind=\"user.name\"></span>\n" +
    "                                <span class=\"new-late-label\" ng-show=\"newAbsencesIds.indexOf(user.absence_id) != -1\">(NEW)</span>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-from\">{{ user.start  && (set_date(user.start) | date:'dd.MM') || '-'}}</td>\n" +
    "                            <td class=\"lates-column-to\">{{ user.end  && (set_date(user.end) | date:'dd.MM') || '-'}}</td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                        <tr ng-show=\"get_work_from_home().length > 0\" class=\"late-light\">\n" +
    "                            <td colspan=\"2\" class=\"lates-column-header\">WORK FROM HOME</td>\n" +
    "                            <td class=\"lates-column-header-date\"><span>From</span></td>\n" +
    "                            <td class=\"lates-column-header-date\"><span>To</span></td>\n" +
    "                        </tr>\n" +
    "                        <tr class=\"work-from-home-record\" ng-repeat=\"user in get_work_from_home()\" data-placement=\"left\" bs-tooltip=\"user.explanation\">\n" +
    "                            <td>\n" +
    "                                <button class=\"close\" aria-hidden=\"true\" ng-click=\"openRemovalConfirmation(user)\">×</button>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-user\">\n" +
    "                                <span class=\"name\" ng-bind=\"user.name\"></span>\n" +
    "                                <span class=\"new-late-label\" ng-show=\"newLatesIds.indexOf(user.late_id) != -1\">(NEW)</span>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-from\">{{ user.start  && (set_time(user.start) | date:'HH:mm') || '-'}}</td>\n" +
    "                            <td class=\"lates-column-to\">{{ user.end  && (set_time(user.end) | date:'HH:mm') || '-'}}</td>\n" +
    "                        </tr>\n" +
    "\n" +
    "                        <tr ng-show=\"get_lates().length > 0\" class=\"late-light\">\n" +
    "                            <td colspan=\"2\" class=\"lates-column-header\">OUT OF OFFICE</td>\n" +
    "                            <td class=\"lates-column-header-date\"><span bs-tooltip=\"'Time when person leaves office'\">From</span></td>\n" +
    "                            <td class=\"lates-column-header-date\"><span bs-tooltip=\"'Time when person comes to office'\">To</span></td>\n" +
    "                        </tr>\n" +
    "                        <tr class=\"late-record\" ng-repeat=\"user in get_lates()\" data-placement=\"left\" bs-tooltip=\"user.explanation\">\n" +
    "                            <td>\n" +
    "                                <button class=\"close\" aria-hidden=\"true\" ng-click=\"openRemovalConfirmation(user)\">×</button>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-user\">\n" +
    "                                <span class=\"name\" ng-bind=\"user.name\"></span>\n" +
    "                                <span class=\"new-late-label\" ng-show=\"newLatesIds.indexOf(user.late_id) != -1\">(NEW)</span>\n" +
    "                            </td>\n" +
    "                            <td class=\"lates-column-from\">{{ user.start  && (set_time(user.start) | date:'HH:mm') || '-'}}</td>\n" +
    "                            <td class=\"lates-column-to\">{{ user.end  && (set_time(user.end) | date:'HH:mm') || '-'}}</td>\n" +
    "                        </tr>\n" +
    "                    </tbody>\n" +
    "                </table>\n" +
    "            </div>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "    <div id=\"floatBar\">\n" +
    "        <div id=\"new-lates-button\">\n" +
    "            <div id=\"absences-quantity\" title=\"Total absences/holiday quantity\">{{ get_absences().length }}</div>\n" +
    "            <div id=\"work-from-home-quantity\" title=\"Total work from home quantity\">{{ get_work_from_home().length }}</div>\n" +
    "            <div id=\"lates-quantity\" title=\"Total out of office quantity\">{{ get_lates().length }}</div>\n" +
    "            <div ng-show=\"newLatesQuantity > 0\" ng-click=\"show()\" id=\"new-quantity\" title=\"New lates and absences quantity\">{{ newLatesQuantity }}</div>\n" +
    "        </div>\n" +
    "        <div ng-click=\"show()\" class=\"badge\" title=\"Click to show the list of lates and absences\">\n" +
    "            Out of office today\n" +
    "        </div>\n" +
    "        <span ng-click=\"openModal()\" ng-show=\"show_box\" class=\"badge\" title=\"Click to configure your black list\">Settings</span>\n" +
    "    </div>\n" +
    "\n" +
    "\n" +
    "    <div id=\"dialogRemovalConfirmation\" title=\"Add this person to black list?\">\n" +
    "      <p>\n" +
    "        Are you sure you want to add <b id=\"proposalName\"></b> to your black list? <br>\n" +
    "        <h6>\n" +
    "            <span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin: 0 7px 20px 0\"></span>\n" +
    "            Remember that you can adjust your black list later in the settings.\n" +
    "        </h6>\n" +
    "      </p>\n" +
    "    </div>\n" +
    "</div>"
  );

}]);
